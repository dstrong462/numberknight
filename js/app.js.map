{"version":3,"sources":["customization.js","startup.js","menus.js","build_lists.js","build_levels.js","build_math.js","monster_manual.js","spawn_enemies.js","enemy_abilities.js","movement_enemy.js","movement_player.js","attack_player.js","tutorial.js","death.js","utilities.js","loading.js","testing.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjvPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzmvorzblvepjljSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/////////////// CUSTOMIZATION ///////////////\r\n\r\nvar maxScreenWidth = 700;\r\nvar numberOfColumns = 5;\r\nvar maxColumns = 7;\r\nvar maxRows = 9;\r\n// Amount of screen space to be saved for the UI in pixels\r\nvar reservedSpace = 150;\r\n// Side wall in pixels\r\nvar reservedSides = 15;\r\n// Minimum percentage of correct answers per level\r\nvar correctMinThreshold = 25;\r\nvar correctMaxThreshold = 60;\r\n\r\n// Customize variables for restoration\r\nvar healthRestoreFromCapture = 1;\r\nvar timeRestoreFromCapture = 4;\r\nvar timeLostFromWrongAnswer = 0;\r\nvar defaultTimer = 60;\r\n\r\n// Customize variables for damage\r\nvar heroBaseDamage = 25;\r\nvar damageFromWrongAnswer = 20;\r\nvar damageFromTraps = 15;\r\n// Playing with a keyboard is much easier, so if they use a keyboard, make enemies harder\r\nvar keyboardPlayer = false;\r\nvar keyboardDamageModifier = 1.5;\r\n\r\nvar chanceToSpawnTrap = 80;\r\nvar backgrounds = 2;\r\nvar tilesets = 10;\r\nvar walls = 16;\r\nvar empty = 6;\r\nvar traps = ['fire-grate','spikes'];\r\nvar trapsToBuild = [];\r\nvar debrisToBuild;\r\nvar columnsToBuild;\r\nvar loot = [\r\n    {\r\n        type: 'health',\r\n        amount: [5,10,15]\r\n    },\r\n    {\r\n        type: 'gold',\r\n        amount: [1,2,5,10,25]\r\n    }\r\n];\r\n// Chance to spawn that sweet loot\r\nvar lootChance = 50;\r\n\r\n// Object Themes\r\nvar themes = [\r\n    // Storage Room\r\n    ['pot-1','pot-2','pot-3','pot-4','pot-5','pot-6','bones-1','bones-3','bones-4','bones-5','bones-6','bones-7','barrel-1','barrel-2','box-1','box-2','table-1','table-2','shelf-1','weapons-1','weapons-2'],\r\n    // Study\r\n    ['bones-3','bones-4','bones-5','chair-1','chair-2','table-1','table-2','shelf-1','shelf-2'],\r\n    // Graveyard 1\r\n    ['fence-1','fence-2','bones-1','bones-2','bones-3','bones-4','bones-5','bones-6','bones-7','coffin-1','coffin-2','coffin-3','grave-1','grave-2','grave-3','grave-4','grave-5','grave-6','monument-1','monument-2','monument-3','monument-4','vase-1','vase-2'],\r\n    // Graveyard 2\r\n    ['fence-1','fence-2','tree-1','tree-2','bush-1','bush-2','bones-1','bones-2','bones-3','bones-4','bones-5','bones-6','bones-7','coffin-1','coffin-2','coffin-3','grave-1','grave-2','grave-3','grave-4','grave-5','grave-6','monument-1','monument-2','monument-3','monument-4'],\r\n    // Outside Area\r\n    ['fence-1','fence-2','tree-1','tree-2','bush-1','bush-2','bones-1','bones-2']\r\n];\r\n\r\nvar gameMode = ['multiples','factors','primes','equality'];\r\nvar challengeMode = ['ascending','descending'];\r\n\r\nvar maxWeight = 0;\r\nvar totalWeight = 0;\r\nvar numberOfEnemies = 0;\r\nvar maxEnemies = 0;\r\nvar enemies = [];","/////////////// STARTUP ///////////////\r\n\r\n// Show splash screen\r\n(function splashScreen() {\r\n    var splash = document.querySelector('#splash img');\r\n        splash.style.animation = 'img-fade-in 1.25s 1s 1 forwards';\r\n    setTimeout(function(){\r\n        splash.parentElement.addEventListener('click', fadeImgOut);\r\n    }, 1250);\r\n    var fadeOut = setTimeout(function() {\r\n        fadeImgOut();\r\n    }, 5000);\r\n    function fadeImgOut() {\r\n        clearInterval(fadeOut);\r\n        splash.style.animation = 'img-fade-out 1.25s 1 forwards';\r\n        splash.parentElement.style.animation = 'img-fade-out 0.75s 1.75s 1 forwards';\r\n        setTimeout(function() {\r\n            splash.parentElement.style.display = 'none';\r\n        }, 2500);\r\n    }\r\n}());\r\n\r\n\r\n// Check if there is already an options file\r\nif (localStorage.getItem('options') === null) {\r\n    // If not, then create a blank one\r\n    options = {\r\n        newgame: true,\r\n        tutorial: true,\r\n        endgame: false,\r\n        soundfx: true,\r\n        music: true,\r\n        enemiesEncountered: [],\r\n        newEnemies: 0,\r\n        gold: 0\r\n    };\r\n}\r\nelse {\r\n    // Otherwise, retrieve and parse it\r\n    var retrievedList = localStorage.getItem('options');\r\n        options = JSON.parse(retrievedList);\r\n}\r\n\r\n// Check if there is already a death list\r\nif (localStorage.getItem('fallenHeroes') === null) {\r\n    // If not, then create a blank one\r\n    fallenHeroes = [];\r\n}\r\nelse {\r\n    // Otherwise, retrieve and parse it\r\n    var retrievedList = localStorage.getItem('fallenHeroes');\r\n        fallenHeroes = JSON.parse(retrievedList);\r\n}\r\n\r\n// Get display width\r\nvar screenWidth = window.innerWidth\r\n|| document.documentElement.clientWidth\r\n|| document.body.clientWidth;\r\n\r\n// Max screen width for desktop viewing\r\nif (screenWidth > maxScreenWidth) { screenWidth = maxScreenWidth; }\r\n\r\n// Allow more columns for larger screen sizes\r\nif (screenWidth >= maxScreenWidth) {\r\n    numberOfColumns = maxColumns;\r\n}\r\n\r\n// Get display height\r\nvar screenHeight = window.innerHeight\r\n|| document.documentElement.clientHeight\r\n|| document.body.clientHeight;\r\n\r\nscreenWidth = screenWidth - (reservedSides * 2);\r\n\r\nvar cellSize = Math.floor(screenWidth / numberOfColumns);\r\n\r\nvar numberOfRows = Math.floor((screenHeight - reservedSpace) / cellSize);\r\nif (numberOfRows > maxRows) { numberOfRows = maxRows; }\r\nvar totalCells = numberOfColumns * numberOfRows;\r\n\r\n// Resize UI to match grid size\r\nvar cellFontSize = cellSize / 5 + 'px';\r\nvar uiWidth = (numberOfColumns * cellSize) + 'px';\r\nvar topBar = document.getElementById('top-bar');\r\n    topBar.style.width = uiWidth;\r\nvar bottomBar = document.getElementById('bottom-bar');\r\n    bottomBar.style.width = uiWidth;\r\n\r\nvar optionsPosition = 'closed';\r\nvar levelContainer = document.getElementById('level-container');\r\n    levelContainer.style.width = numberOfColumns * cellSize + 'px';\r\nvar heroContainer = document.getElementById('hero-container');\r\nvar player = document.getElementById('hero');\r\n    player.addEventListener('click', checkMath);\r\nvar healthBar = document.getElementById('health');\r\nvar timeBar = document.getElementById('time');\r\nvar xpBar = document.getElementById('xp');","/////////////// MENUS ///////////////\r\n\r\n// Add functionality to title menu buttons\r\nfunction titleScreen() {\r\ndocument.body.style.height = '100vh';\r\n// When starting a new game, rotate the display\r\nvar newGameButton = document.getElementById('btn-new-game');\r\n    newGameButton.addEventListener('click', function() {\r\n        var screen = document.querySelector('.flipper');\r\n            screen.style.transform = 'rotateY(-180deg)';\r\n        // Reset game modes\r\n        gameMode = ['multiples','factors','primes','equality'];\r\n        document.getElementById('multiples').checked = true;\r\n        document.getElementById('factors').checked = true;\r\n        document.getElementById('primes').checked = true;\r\n        document.getElementById('equality').checked = true;\r\n    });\r\n// To continue your progress in an existing game\r\nvar continueButton = document.getElementById('btn-continue');\r\n    continueButton.addEventListener('click', function() {\r\n        // Retrieve saved game from local storage and parse it\r\n        var retrievedList = localStorage.getItem('savedGame');\r\n            hero = JSON.parse(retrievedList);\r\n            options.newgame = false;\r\n        startGame();\r\n    });\r\nvar optionsButton = document.querySelectorAll('.btn-options');\r\n    for (var i = 0; i < optionsButton.length; i++) {\r\n        optionsButton[i].addEventListener('click', function(e) {\r\n            // Hide main menu button if needed\r\n            if (e.target.offsetParent.id === 'title-screen') {\r\n                document.querySelector('#options-menu .return-to-main-menu').style.display = 'none';\r\n            }\r\n            else if (e.target.parentElement.id === 'top-bar') {\r\n                document.querySelector('#options-menu .return-to-main-menu').style.display = 'inline-block';\r\n            }\r\n            // Open options menu\r\n            var menu = document.getElementById('options-menu');\r\n            if (optionsPosition === 'closed') {\r\n                hero.pause = true;\r\n                menu.style.transform = 'translateX(0)';\r\n                optionsPosition = 'open';\r\n            }\r\n            else {\r\n                hero.pause = false;\r\n                setOptions();\r\n                menu.style.transform = 'translateX(-100%)';\r\n                optionsPosition = 'closed';\r\n            }\r\n\r\n        });\r\n    }\r\nvar gamemodesButton = document.getElementById('btn-gamemodes');\r\n    gamemodesButton.addEventListener('click', showGamemodes);\r\n\r\n// When returning to the main menu, rotate the display back\r\nvar mainMenuButton = document.getElementById('btn-main-menu');\r\n    mainMenuButton.addEventListener('click', function() {\r\n        var screen = document.querySelector('.flipper');\r\n            screen.style.transform = 'rotateY(0deg)';\r\n    });\r\n// When ready to play, get the play name and selected difficulties\r\nvar playButton = document.getElementById('btn-play');\r\n    playButton.addEventListener('click', function(e) {\r\n        delete hero;\r\n        hero = {};\r\n        hero.name = document.getElementById('name-input').value;\r\n        hero.difficultyMath = document.querySelector('input[name=\"mathradio\"]:checked').value;\r\n        hero.difficultyMonster = document.querySelector('input[name=\"monsterradio\"]:checked').value;\r\n        if (hero.name.length === 0) {\r\n            alert('Please name your character.');\r\n        }\r\n        else if (hero.name.length > 20) {\r\n            alert('In this world no name is longer than 20 characters long.');\r\n        }\r\n        else if (gameMode.length === 0) {\r\n            alert('That would be too easy. Select at least 1 game mode.');\r\n        }\r\n        else if (hero.name.length > 0 && hero.name.length <= 20 && hero.difficultyMath && hero.difficultyMonster && gameMode.length >= 1) {\r\n            options.newgame = true;\r\n            startGame();\r\n        }\r\n    });\r\n\r\n// Allow selecting different game modes to update array\r\nvar modeMultiples = document.getElementById('multiples');\r\n    modeMultiples.addEventListener('click', adjustGameMode);\r\nvar modeFactors = document.getElementById('factors');\r\n    modeFactors.addEventListener('click', adjustGameMode);\r\nvar modePrimes = document.getElementById('primes');\r\n    modePrimes.addEventListener('click', adjustGameMode);\r\nvar modeEquality = document.getElementById('equality');\r\n    modeEquality.addEventListener('click', adjustGameMode);\r\n\r\nvar returnToMainMenu = document.querySelector('.return-to-main-menu');\r\n    returnToMainMenu.addEventListener('click', function() {\r\n        fadeToMainMenu(fadeIn);\r\n    });\r\n\r\ntitleButtons();\r\n}\r\n\r\ntitleScreen();\r\n\r\n// Check if there is already a saved game\r\nfunction titleButtons() {\r\n    if (localStorage.getItem('savedGame') === null) {\r\n        // If not, then create a blank one\r\n        savedGame = [];\r\n        // And hide continue button on main menu\r\n        var continueButton = document.getElementById('btn-continue');\r\n            continueButton.style.display = 'none';\r\n    }\r\n    else {\r\n        // Otherwise, retrieve and parse it\r\n        var retrievedData = localStorage.getItem('savedGame');\r\n            savedGame = JSON.parse(retrievedData);\r\n        var continueButton = document.getElementById('btn-continue');\r\n            continueButton.style.display = 'inline-block';\r\n    }\r\n    // Display bestiary button if any monsters have been encountered\r\n    if (options.enemiesEncountered.length > 0) {\r\n        var bestiaryButton = document.getElementById('btn-bestiary');\r\n            bestiaryButton.addEventListener('click', displayBestiary);\r\n            bestiaryButton.style.display = 'flex';\r\n        // Display notification if new enemies have been encountered\r\n        if (options.newEnemies > 0) {\r\n            var newCount = document.getElementById('btn-bestiary-new');\r\n                newCount.innerHTML = options.newEnemies;\r\n                newCount.style.display = 'flex';\r\n        }\r\n    }\r\n    // Display Fallen Heroes button if there are any\r\n    if (fallenHeroes.length > 0) {\r\n        document.getElementById('btn-fallen-heroes').style.display = 'flex';\r\n    }\r\n    else {\r\n        document.getElementById('btn-fallen-heroes').style.display = 'none';\r\n    }\r\n    // Display gold total\r\n    if (options.gold > 0) {\r\n        var goldTotal = document.querySelector('#gold-total span');\r\n            goldTotal.parentElement.style.display = 'flex';\r\n            goldTotal.innerHTML = options.gold.toLocaleString();\r\n    }\r\n}\r\n\r\nvar soundfx = document.getElementById('soundfx');\r\nvar music = document.getElementById('music');\r\n    soundfx.addEventListener('click', setOptions);\r\n    music.addEventListener('click', setOptions);\r\n    // Set correct display of buttons based on saved options\r\n    if (options.soundfx) {\r\n        soundfx.checked = true;\r\n    }\r\n    else {\r\n        soundfx.checked = false;\r\n    }\r\n    if (options.music) {\r\n        music.checked = true;\r\n    }\r\n    else {\r\n        music.checked = false;\r\n    }\r\n\r\n\r\n// Set sound options in local storage\r\nfunction setOptions() {\r\n    // Change in local storage if needed\r\n    if (soundfx.checked) {\r\n        options.soundfx = true;\r\n    }\r\n    else {\r\n        options.soundfx = false;\r\n    }\r\n    if (music.checked) {\r\n        options.music = true;\r\n    }\r\n    else {\r\n        options.music = false;\r\n    }\r\n    localStorage.setItem('options', JSON.stringify(options));\r\n}\r\n\r\n\r\nvar mathradio = document.querySelectorAll('#math-difficulty input');\r\n    mathradio[0].checked = true;\r\n    for (var i = 0; i < mathradio.length; i++) {\r\n        mathradio[i].addEventListener('click', adjustDifficulty);\r\n    }\r\nvar monsterradio = document.querySelectorAll('#monster-difficulty input');\r\n    monsterradio[0].checked = true;\r\n    for (var i = 0; i < monsterradio.length; i++) {\r\n        monsterradio[i].addEventListener('click', adjustDifficulty);\r\n    }\r\n\r\n\r\n// Adjust display of stars for math and monster difficulties\r\nfunction adjustDifficulty(e) {\r\n    if (e.target.name === 'mathradio') {\r\n        var name = mathradio;\r\n    }\r\n    else if (e.target.name === 'monsterradio') {\r\n        var name = monsterradio;\r\n    }\r\n    // Make all grey to start\r\n    for (var i = 1; i < name.length; i++) {\r\n        name[i].nextElementSibling.firstChild.style.backgroundImage = 'url(\"img/gui/star-off.svg\")';\r\n    }\r\n    // Highlight stars as needed\r\n    for (var i = 0; i < e.target.value; i++) {\r\n        name[i].nextElementSibling.firstChild.style.backgroundImage = 'url(\"img/gui/star-on.svg\")';\r\n    }\r\n}\r\n\r\n\r\n// Add and remove game modes as they are checked and unchecked\r\nfunction adjustGameMode(e) {\r\n    var mode = gameMode.indexOf(e.target.id); \r\n    if (e.target.checked && mode === -1) {\r\n        gameMode.push(e.target.id);\r\n    }\r\n    else if (!e.target.checked && mode !== -1) { \r\n        gameMode.splice(mode, 1);\r\n    }\r\n}","/////////////// BUILD_LISTS ///////////////\r\n\r\nvar fallenButton = document.getElementById('btn-fallen-heroes');\r\n    fallenButton.addEventListener('click', displayHeroes);\r\n\r\n// Display fallen heroes\r\nfunction displayHeroes() {\r\n    var listDisplay = document.createElement('div');\r\n        listDisplay.id = 'fallen-heroes';\r\n    document.body.appendChild(listDisplay);\r\n    var container = document.getElementById('fallen-heroes');\r\n    var title = '<h5>Fallen Heroes</h5><br />';\r\n        container.innerHTML = title;\r\n\r\n    var i = 0;\r\n    createList();\r\n    // Loop through array at a set interval\r\n    function createList() {\r\n        setTimeout(function() {\r\n            if (fallenHeroes.length > 0) {\r\n            var row = document.createElement('div');\r\n                row.classList.add('row');\r\n                row.id = 'fallen-' + i;\r\n            var entry = '<div><span>' + fallenHeroes[i].name + '</span>';\r\n                entry += '<span>Floor ' + fallenHeroes[i].gameLevel + '</span></div>';\r\n                if (fallenHeroes[i].death === 'Quest Complete') {\r\n                    entry += '<p class=\"complete\">' + fallenHeroes[i].death + '</p>';\r\n                }\r\n                else {\r\n                    entry += '<p>' + fallenHeroes[i].death + '</p>';\r\n                }\r\n                row.innerHTML = entry;\r\n                container.appendChild(row);\r\n            var button = document.getElementById(row.id);\r\n                button.addEventListener('click', function() {\r\n                    var item = button.id.split('-').pop();\r\n                    listFallenStats(fallenHeroes[item],'fallen-heroes');\r\n                });\r\n                row = container.lastChild;\r\n                row.style.transition = 'opacity .5s';\r\n                setTimeout(function() {\r\n                    row.style.opacity = '1';\r\n                }, 200);\r\n                i++;\r\n                if (i < fallenHeroes.length) {\r\n                    createList();\r\n                }\r\n                else {\r\n                    appendButtons();\r\n                }\r\n            }\r\n            else {\r\n                appendButtons();\r\n            }\r\n\r\n            function appendButtons() {\r\n                var footer = document.createElement('div');\r\n                    footer.style.paddingBottom = '25px';\r\n                    footer.innerHTML = '<button></button><button id=\"clearlist\"></button>';\r\n                    container.appendChild(footer);\r\n\r\n                var button = document.querySelector('#fallen-heroes button');\r\n                    button.addEventListener('click', function() {\r\n                        container.remove();\r\n                    });\r\n                var trash = document.getElementById('clearlist');\r\n                    trash.addEventListener('click', clearList);\r\n                if (fallenHeroes.length === 0) {\r\n                    trash.style.display = 'none';\r\n                }\r\n            }\r\n        }, 100);\r\n    }\r\n}\r\n\r\n\r\n// Clear high score list\r\nfunction clearList() {\r\n    if (confirm('This will clear your Fallen Heroes list. Are you sure about this?')) {\r\n        localStorage.removeItem('fallenHeroes');\r\n        delete fallenHeroes;\r\n        fallenHeroes = [];\r\n        var container = document.getElementById('fallen-heroes');\r\n            container.remove();\r\n        displayHeroes();\r\n        document.getElementById('btn-fallen-heroes').style.display = 'none';\r\n    }\r\n}\r\n\r\n\r\n// Display information about the different game modes\r\nfunction showGamemodes(e) {\r\n    var tutorial = document.getElementById('tutorial');\r\n        tutorial.innerHTML = '';\r\n        tutorial.style.backgroundImage = 'url(\"img/backgrounds/background-0' + randomNumber(1,backgrounds) + '.gif\")';\r\n    \r\n    var list = '<h5>Game Modes</h5>';\r\n        list += '<br />';\r\n        list += '<h6>Multiples</h6>';\r\n        list += '<p>Find and capture tiles that are MULTIPLES of the number given. Multiples of 5 would be 5, 10, 15, 20, etc.</p>';\r\n        list += '<h6>Factors</h6>';\r\n        list += '<p>Find and capture tiles that evenly divide into the given number. Factors of 20 would be 1, 2, 4, 5, and so on.</p>';\r\n        list += '<h6>Prime Numbers</h6>';\r\n        list += '<p>These are numbers that are only divisible by 1 and themselves. Examples of prime numbers are 3, 5, 7, and 11.</p>';\r\n        list += '<h6>Equality</h6>';\r\n        list += '<p>Select equations that equal the given number. Examples for Equals 6 would include 2+4, and 12&divide;2.</p>';\r\n        list += '<br />';\r\n        list += '<h5>Challenge Levels</h5>';\r\n        list += '<p>Challenge levels are not part of the normal rotation, but will occur every few levels to mix things up.</p>';\r\n        list += '<br />';\r\n        list += '<h6>Ascending Order</h6>'\r\n        list += '<p>Capture the tiles in ascending order from lowest number to highest.</p>';\r\n        list += '<h6>Descending Order</h6>'\r\n        list += '<p>Capture the tiles in descending order from highest number to lowest.</p>';\r\n        list += '<br /><input type=\"checkbox\" name=\"enable-tutorial\" id=\"enable-tutorial\" checked /><label for=\"enable-tutorial\"><span></span>Show Tutorial Next Time</label>'\r\n        list += '<div class=\"row\"><button class=\"btn-back\"></button></div>';\r\n\r\n        tutorial.innerHTML = list;\r\n        tutorial.style.height = 'auto';\r\n\r\n    var backButton = document.querySelector('#tutorial .btn-back');\r\n        backButton.addEventListener('click', function() {\r\n            localStorage.setItem('options', JSON.stringify(options));\r\n            tutorial.style.display = 'none';\r\n            tutorial.innerHTML = '';\r\n        });\r\n\r\n        tutorial.style.display = 'flex';\r\n        tutorial.style.opacity = '1';\r\n\r\n    // Allow user to disable tutorial from showing on starting a new game\r\n    var tutorialCheckbox = document.querySelector('#tutorial input');\r\n    if (options.tutorial) {\r\n        tutorialCheckbox.checked = true;\r\n    }\r\n    else {\r\n        tutorialCheckbox.checked = false;\r\n    }\r\n        tutorialCheckbox.addEventListener('click', function(e) {\r\n            if (e.target.checked) {\r\n                options.tutorial = true;\r\n            }\r\n            else if (!e.target.checked) {\r\n                options.tutorial = false;\r\n            }\r\n        });\r\n}\r\n\r\n\r\n// Display bestiary\r\nfunction displayBestiary() {\r\n    var bestiaryScreen = document.getElementById('bestiary');\r\n        bestiaryScreen.innerHTML = '';\r\n        bestiaryScreen.style.backgroundImage = 'url(\"img/backgrounds/background-0' + randomNumber(1,backgrounds) + '.gif\")';\r\n    \r\n    var list = '<h5>Monster Manual</h5>';\r\n\r\n    for (var i = 0; i < options.enemiesEncountered.length; i++) {\r\n        var monster = bestiary.filter(function(monster) {\r\n            return monster.type === options.enemiesEncountered[i];\r\n        })[0];\r\n        if (monster === undefined) {\r\n            var monster = bosses.filter(function(monster) {\r\n                return monster.type === options.enemiesEncountered[i];\r\n            })[0];\r\n        }\r\n        list += '<div class=\"bestiary\">';\r\n        list += '<img src=\"img/enemies/' + monster.image + '\" />';\r\n        list += '<div><h6>' + monster.type + '</h6>';\r\n        list += '<p>' + monster.info + '</p></div></div>';  \r\n    }\r\n\r\n    bestiaryScreen.innerHTML = list;\r\n    bestiaryScreen.style.height = 'auto';\r\n\r\n    var button = document.createElement('button');\r\n        button.className = 'btn-back';\r\n        bestiaryScreen.appendChild(button);\r\n        button.addEventListener('click', function() {\r\n            bestiaryScreen.style.display = 'none';\r\n            bestiaryScreen.innerHTML = '';\r\n        });\r\n\r\n    bestiaryScreen.style.display = 'flex';\r\n    bestiaryScreen.style.opacity = '1';\r\n\r\n    options.newEnemies = 0;\r\n    localStorage.setItem('options', JSON.stringify(options));\r\n    var newCount = document.getElementById('btn-bestiary-new');\r\n        newCount.style.display = 'none';\r\n}\r\n\r\n// Display fallen hero stats\r\nfunction listFallenStats(hero,view) {\r\n    var gameOverScreen = document.getElementById('game-over');\r\n        gameOverScreen.innerHTML = '';\r\n        gameOverScreen.style.backgroundImage = 'url(\"img/backgrounds/background-0' + randomNumber(1,backgrounds) + '.gif\")';\r\n    var stats = '<h5>' + hero.name + '</h5>';\r\n        stats += '<p>Level: <span>' + hero.level + '</span></p>';\r\n        stats += '<p>strength: <span>' + hero.strength + '</span></p>';\r\n        stats += '<p>Dexterity: <span>' + hero.dexterity + '</span></p>';\r\n        stats += '<p>Endurance: <span>' + hero.endurance + '</span></p>';\r\n        stats += '<p>Dungeon Level: <span>' + hero.gameLevel + '</span></p>';\r\n        stats += '<p>Math Difficulty: <span>' + hero.difficultyMath + '</span></p>';\r\n        stats += '<p>Monster Difficulty: <span>' + hero.difficultyMonster + '</span></p>';\r\n        if (hero.death === 'Quest Complete') {\r\n            stats += '<p class=\"win\">' + hero.death + '</p>';\r\n        }\r\n        else {\r\n            stats += '<p class=\"death\">' + hero.death + '</p>';\r\n        }\r\n        stats += '<h6>Accuracy</h6>';\r\n        stats += '<p>Multiples: <span>' + getAccuracy(hero.multiplesRight,hero.multiplesWrong) + '</span></p>';\r\n        stats += '<p>Factors: <span>' + getAccuracy(hero.factorsRight,hero.factorsWrong) + '</span></p>';\r\n        stats += '<p>Primes: <span>' + getAccuracy(hero.primesRight,hero.primesWrong) + '</span></p>';\r\n        stats += '<p>Equality: <span>' + getAccuracy(hero.equalsRight,hero.equalsWrong) + '</span></p>';\r\n        stats += '<h6>Fun Stats</h6>';\r\n        stats += '<p>Spaces Moved: <span>' + hero.squaresMoved + '</span></p>';\r\n        stats += '<p>Enemies Slain: <span>' + hero.enemiesSlain + '</span></p>';\r\n        stats += '<p>Traps Evaded: <span>' + hero.trapsEvaded + '</span></p>';\r\n        stats += '<p>Attacks Evaded: <span>' + hero.attacksEvaded + '</span></p>';\r\n        stats += '<p>Times Frozen: <span>' + hero.timesFrozen + '</span></p>';\r\n        stats += '<p>Times Spider Webbed: <span>' + hero.timesWebbed + '</span></p>';\r\n        stats += '<p>Times Poisoned: <span>' + hero.timesPoisoned + '</span></p>';\r\n        gameOverScreen.innerHTML = stats;\r\n        gameOverScreen.style.opacity = '0';\r\n        gameOverScreen.style.display = 'flex';\r\n        setTimeout(function() {\r\n            gameOverScreen.style.opacity = '1';\r\n        }, 200);\r\n    if (view === 'game-over') {\r\n        var button = document.createElement('button');\r\n            button.classList.add('main-menu-button');\r\n            button.innerHTML = 'Main Menu';\r\n            button.addEventListener('click', function() {\r\n                fadeToMainMenu(fadeIn);\r\n            });\r\n    }\r\n    else {\r\n        var button = document.createElement('button');\r\n            button.classList.add('btn-back');\r\n            button.addEventListener('click', function() {\r\n                gameOverScreen.style.display = 'none';\r\n            });\r\n    }\r\n    gameOverScreen.appendChild(button);\r\n    gameOverScreen.style.height = 'auto';\r\n}","/////////////// BUILD_LEVELS ///////////////\r\n\r\n// Start Game\r\nfunction startGame() {\r\n    fadeOut();\r\n    // Build dungeon and reset menus\r\n    setTimeout(function() {\r\n        resetAll(buildMap);\r\n        document.querySelector('.flipper').style.transform = 'rotateY(0deg)';\r\n        document.querySelector('.flip-container').style.display = 'none';\r\n        document.getElementById('tutorial').style.display = 'none';\r\n    }, 1000);\r\n}\r\n\r\n\r\n// Reset anything from the previous level\r\nfunction resetAll(callback) {\r\n    console.log('resetAll');\r\n    map = null;\r\n    enemies = null;\r\n    numberOfEnemies = 0;\r\n    totalWeight = 0;\r\n    hero.canMove = false;\r\n    hero.timer = 100;\r\n    timeBar.style.width = '100%';\r\n    timeBar.style.display = 'flex';\r\n    if (timeBar.classList.contains('time-danger')) {\r\n        timeBar.classList.remove('time-danger');\r\n    }\r\n    keyboardPlayer = false;\r\n    // Reset challenge and boss levels\r\n    hero.challengeMode = false;\r\n    hero.bossLevel = false;\r\n    hero.bossHasSpawned = false;\r\n    hero.bossIsDead = false;\r\n    optionsPosition = 'closed';\r\n    document.getElementById('options-menu').style.transform = 'translateX(-100%)';\r\n    var title = document.querySelector('.flip-container');\r\n        title.style.display = 'flex';\r\n    var gameOver = document.getElementById('game-over');\r\n        gameOver.style.display = 'none';\r\n        gameOver.style.opacity = '0';\r\n    callback(addHero);\r\n}\r\n\r\n\r\n// Fade to black\r\nfunction fadeOut() {\r\n    var fade = document.getElementById('fade-to-black');\r\n        fade.style.display = 'flex';\r\n        fade.style.animation = 'fade-out 1s 1 forwards';\r\n}\r\n\r\n// Fade back in\r\nfunction fadeIn() {\r\n    var fade = document.getElementById('fade-to-black');\r\n        fade.style.animation = 'fade-in 1s 1 forwards';\r\n    var save = document.getElementById('warning');\r\n        save.src = 'img/gui/save.svg';\r\n        save.style.animation = 'saving 3s 1s 1';\r\n    setTimeout(function() {\r\n        fade.style.display = 'none';\r\n        healthBar.style.transition = '.5s';\r\n        xpBar.style.transition = '.5s';\r\n    }, 950);\r\n    // Splash level text if necessary\r\n    if (hero.bossLevel) {\r\n        var levelSplash = document.getElementById('level-splash');\r\n            levelSplash.style.opacity = '0';\r\n            levelSplash.style.display = 'flex';\r\n            levelSplash.innerHTML = '<div><h5>- BOSS LEVEL -</h5></div>';\r\n            levelSplash.style.animation = 'warning 2.5s 1s 1 forwards';\r\n        setTimeout(function() {\r\n            levelSplash.style.display = 'none';\r\n        }, 3500);\r\n    }\r\n}\r\n\r\n\r\n// Build an array of objects for the grid. This will store the column, row, its contents, etc.\r\nfunction buildMap(callback) {\r\n    console.log('buildMap');\r\n    // Set Challenge Level\r\n    if (hero.gameLevel % 8 === 0) {\r\n        hero.challengeMode = true;\r\n    }\r\n    // Set Boss Level\r\n    if (hero.gameLevel % 6 === 0) {\r\n        hero.bossLevel = true;\r\n    }\r\n    levelContainer.innerHTML = '';\r\n    levelContainer.appendChild(heroContainer);\r\n    map = [];\r\n    enemies = [];\r\n    // Pick a random tileset\r\n    tilesetNumber = randomNumber(1,tilesets);\r\n    tilesetInside = randomNumber(1,tilesets);\r\n    if (options.tutorial && options.newgame || options.endgame) {\r\n        tilesetNumber = tutorialData.tilesetOutside;\r\n        tilesetInside = tutorialData.tilesetInside;\r\n    }\r\n    // Cycle through each row\r\n    for (var r = 1; r <= numberOfRows; r++) {\r\n        var newRow = [];\r\n        var row = 'r' + r;\r\n        // Cycle through each column\r\n        for (var c = 1; c <= numberOfColumns; c++) {\r\n            var col = 'c' + c;\r\n            var location = row + col;\r\n            // Create an object with these details and push to an array\r\n            location = new Cell(location,r,c,'empty');\r\n            newRow.push(location);\r\n        }\r\n        map.push(newRow);\r\n    }\r\n    // Place exit in random cell\r\n    var cell = randomCell();\r\n    if (options.tutorial && options.newgame) {\r\n        cell = tutorialData.exitLocation;\r\n    }\r\n    map[cell[0]][cell[1]].tile = 'exit';\r\n    map[cell[0]][cell[1]].contents = 'exit';\r\n    exit = map[cell[0]][cell[1]];\r\n\r\n    callback();\r\n}\r\n\r\n\r\n// Place the hero on the map in a set position\r\nfunction addHero() {\r\n    console.log('addHero');\r\n    if (hero.health) {\r\n\r\n    }\r\n    // If new game build new hero\r\n    else {\r\n        // Add new player data\r\n        hero = new Cell('r1c1',1,1,'hero');\r\n        hero.armorRating = 1;\r\n        hero.ascending = [];\r\n        hero.attackRating = 1;\r\n        hero.attacksEvaded = 0;\r\n        hero.baseDamage = heroBaseDamage;\r\n        hero.bosses = ['Spider Queen','Vampire Lord','Red Knight'];\r\n        hero.bossHasSpawned = false;\r\n        hero.bossIsDead = false;\r\n        hero.bossLevel = false;\r\n        hero.canCapture = true;\r\n        hero.canMove = true;\r\n        hero.challengeMode = false;\r\n        hero.cooldownTimer = 200;\r\n        hero.dexterity = 1;\r\n        hero.difficultyMath = document.querySelector('input[name=\"mathradio\"]:checked').value;\r\n        hero.difficultyMonster = document.querySelector('input[name=\"monsterradio\"]:checked').value;\r\n        hero.endurance = 1;\r\n        hero.equalsRight = 0;\r\n        hero.equalsWrong = 0;\r\n        hero.enemiesSlain = 0;\r\n        hero.evasion = 10;\r\n        hero.factorsRight = 0;\r\n        hero.factorsWrong = 0;\r\n        hero.fastTravel = false;\r\n        hero.frozen = false;\r\n        hero.gameLevel = 1;\r\n        hero.health = 100;\r\n        hero.hero = true;\r\n        hero.id = 'hero-container';\r\n        hero.knights = [{ number: 0, color: '#888888' }, { number: 2, color: '#cc3234' }, { number: 3, color: '#1cba4c' }, { number: 4, color: '#7c629c' }, { number: 5, color: '#fc8a04' },\r\n                        { number: 6, color: '#cccacc' }, { number: 7, color: '#ffffff' }, { number: 8, color: '#f4fe04' },{ number: 9, color: '#a47644' }];\r\n        hero.lastLocation = map[hero.row - 1][hero.col - 1];\r\n        hero.left = 0;\r\n        hero.level = 1;\r\n        hero.location = 'r' + hero.row + 'c' + hero.col;\r\n        hero.multiplesRight = 0;\r\n        hero.multiplesWrong = 0;\r\n        hero.name = document.getElementById('name-input').value;\r\n        hero.pause = false;\r\n        hero.primesRight = 0;\r\n        hero.primesWrong = 0;\r\n        hero.squaresMoved = 0;\r\n        hero.strength = 1;\r\n        hero.timer = 100;\r\n        hero.timesFrozen = 0;\r\n        hero.timesPoisoned = 0;\r\n        hero.timesWebbed = 0;\r\n        hero.top = 0;\r\n        hero.trapsEvaded = 0;\r\n        hero.xp = 0;\r\n    }\r\n\r\n    if (options.tutorial && options.newgame) {\r\n        hero.top = tutorialData.heroTop;\r\n        hero.left = tutorialData.heroLeft;\r\n        hero.row = tutorialData.heroRow;\r\n        hero.col = tutorialData.heroCol;\r\n        hero.location = tutorialData.heroLocation;\r\n    }\r\n\r\n    // The hero is contained in a 3x3 grid with movement buttons attached\r\n    // Size the container to fit evenly\r\n    heroContainer.style.width = cellSize * 3 + 'px';\r\n    heroContainer.style.height = cellSize * 3 + 'px';\r\n    heroContainer.style.top = '-' + cellSize + 'px';\r\n    heroContainer.style.left = '-' + cellSize + 'px';\r\n    heroContainer.style.zIndex = 15;\r\n    // Size each cell to match the map cell size\r\n    var heroGrid = document.querySelectorAll('#hero-container div');\r\n    for (var i = 0; i < heroGrid.length; i++) {\r\n        heroGrid[i].style.width = cellSize + 'px';\r\n        heroGrid[i].style.height = cellSize + 'px';\r\n    }\r\n\r\n    var name = document.getElementById('player-name');\r\n        name.innerHTML = 'Ser ' + hero.name;\r\n    var level = document.getElementById('level');\r\n        level.innerHTML = 'Floor ' + hero.gameLevel;\r\n    healthBar.style.width = hero.health + '%';\r\n    healthBar.style.transition = '0s';\r\n    timeBar.style.transition = '0s';\r\n    if (hero.challengeMode || hero.bossLevel || options.tutorial || options.endgame) {\r\n        timeBar.style.display = 'none';\r\n    }\r\n    xpBar.style.width = hero.xp + '%';\r\n    xpBar.style.transition = '0s';\r\n    heroContainer.style.transform = 'translate(' + hero.left + 'px, ' + hero.top + 'px)';\r\n    hero.canMove = true;\r\n    hero.canCapture = true;\r\n\r\n    if (options.tutorial === false && options.endgame === false) {\r\n        // Start spawning enemies once the player has started moving or after 10 seconds because these monster aint got all day.\r\n        var moves = hero.squaresMoved;\r\n        var timer = 0;\r\n        var interval = setInterval(function() {\r\n            if (hero.squaresMoved > moves || timer >= 10) {\r\n                clearInterval(interval);\r\n                letTheGamesBegin();\r\n            }\r\n            timer++;\r\n        }, 1000);\r\n    }\r\n\r\n    getObjectLocations();\r\n}\r\n\r\n\r\n// Object constructor for building the map\r\nfunction Cell(location,row,col,tile) {\r\n    this.location = location\r\n    this.row = row;\r\n    this.col = col;\r\n    this.tile = tile;\r\n    this.contents = 'empty';\r\n    this.hero = false;\r\n    this.enemy = [];\r\n}\r\n\r\n\r\n// Build array of safe locations to spawn traps, columns, and debris\r\nfunction getObjectLocations() {\r\n    console.log('getObjectLocations');\r\n    debrisToBuild = randomNumber(3,5);\r\n    columnsToBuild = randomNumber(1,3);\r\n    trapsToBuild = [randomNumber(2,4),randomNumber(5,6),randomNumber(7,8)];\r\n\r\n    var total = trapsToBuild[hero.difficultyMonster - 1] + debrisToBuild + columnsToBuild;\r\n    if (options.endgame) {\r\n        total = 20;\r\n    }\r\n    var fullArray = [];\r\n    locationArray = [];\r\n\r\n    // Generate list of safe locations to spawn traps, columns, and objects\r\n    for (var r = 0; r < numberOfRows; r++) {\r\n        for (var c = 0; c < numberOfColumns; c++) {\r\n            var cell = map[r][c];\r\n            if (cell.location !== hero.location && cell.contents !== 'exit' && cell.contents !== 'blocked') {\r\n                var temp = [cell.row - 1,cell.col - 1];\r\n                fullArray.push(temp);\r\n            }\r\n        }\r\n    }\r\n    // Randomly grab one and remove it from the array to prevent duplicates\r\n    for (var i = 0; i < total * 2; i++) {\r\n        var index = randomNumber(0,fullArray.length - 1);\r\n        var cell = fullArray[index];\r\n            locationArray.push(cell);\r\n            fullArray.splice(index,1);\r\n    }\r\n    randomizeDebris();\r\n}\r\n\r\n\r\n// Return a random location that is not the player or exit location\r\nfunction randomCell() {\r\n    var randomRow = randomNumber(0,(numberOfRows - 1));\r\n    var randomCol = randomNumber(0,(numberOfColumns - 1));\r\n    var cell = map[randomRow][randomCol];\r\n    if (cell.location === hero.location || cell.contents === 'exit' || cell.contents === 'blocked') {\r\n        randomCell();\r\n    }\r\n    else {\r\n        return [randomRow, randomCol];\r\n    }\r\n}\r\n\r\n\r\n// Randomize breakable debris\r\nfunction randomizeDebris() {\r\n    console.log('randomizeDebris');\r\n    var objectTheme = themes[randomNumber(0,themes.length - 1)];\r\n    if (options.tutorial && options.newgame) {\r\n        var number = tutorialData.numDebris;\r\n        objectTheme = tutorialData.objectTheme;\r\n        var template = [[0,0],[numberOfRows - 1,numberOfColumns - 1]];\r\n    }\r\n    else if (options.endgame) {\r\n        var number = 10;\r\n    }\r\n    else {\r\n        var number = debrisToBuild;\r\n    }\r\n    for (var i = 0; i < number; i++) {\r\n        var cell = locationArray[0];\r\n        var object = map[cell[0]][cell[1]];\r\n        if (options.tutorial && options.newgame) {\r\n            object = map[template[i][0]][template[i][1]];\r\n        }\r\n        if (options.endgame) {\r\n            object.object = 'knight-' + i;\r\n        }\r\n        else {\r\n            object.object = objectTheme[randomNumber(0,objectTheme.length - 1)];\r\n        }\r\n        object.tile = 'empty';\r\n        object.contents = 'blocked';\r\n        object.health = 30;\r\n        object.evasion = 0;\r\n        locationArray.shift();\r\n    }\r\n\r\n    randomizeColumns();\r\n}\r\n\r\n\r\n// Randomize columns\r\nfunction randomizeColumns() {\r\n    console.log('randomizeColumns');\r\n    columnArray = [];\r\n    wallTileset = randomNumber(1,walls);\r\n    if (options.endgame || options.tutorial && options.newgame) {\r\n        var number = tutorialData.numColumns;\r\n        wallTileset = tutorialData.wallTileset;\r\n        var template = tutorialData.wallLocation;\r\n    }\r\n    else if (hero.bossLevel !== false) {\r\n        wallTileset = '0';\r\n        var number = 3;\r\n    }\r\n    else {\r\n        var number = columnsToBuild;\r\n    }\r\n\r\n    for (var i = 0; i < number; i++) {\r\n        var cell = locationArray[0];\r\n        var object = map[cell[0]][cell[1]];\r\n        if (options.endgame || options.tutorial && options.newgame) {\r\n            object = map[template[i][0]][template[i][1]];\r\n        }\r\n        columnArray.push({ location: object.location, row: object.row, col: object.col });\r\n        object.object = 'wall';\r\n        object.cage = false;\r\n        object.tile = 'empty';\r\n        object.contents = 'blocked';\r\n        if (hero.bossLevel === false) {\r\n            object.health = 150;\r\n            object.evasion = 0;\r\n        }\r\n        locationArray.shift();\r\n    }\r\n\r\n    randomizeTraps();\r\n}\r\n\r\n\r\n// Percentage chance to spawn a trap\r\nfunction randomizeTraps() {\r\n    console.log('randomizeTraps');\r\n    trapArray = [];\r\n    if (options.tutorial && options.newgame) {\r\n        var totalTraps = tutorialData.numTraps;\r\n        var template = tutorialData.trapLocation;\r\n    }\r\n    else if (options.endgame) {\r\n        var totalTraps = 0;\r\n    }\r\n    else {\r\n        var totalTraps = trapsToBuild[hero.difficultyMonster - 1];\r\n    }\r\n\r\n    var safety = 0;\r\n    for (var i = 0; i < totalTraps; i++) {\r\n        var cell = locationArray[0];\r\n        if (safety > 25) {\r\n            console.log('/// STOP randomizeTraps ///');\r\n            break;\r\n        }\r\n        if (cell === undefined) {\r\n            i--;\r\n            safety++\r\n        }\r\n        else {\r\n            var mapTile = map[cell[0]][cell[1]];\r\n            if (options.tutorial && options.newgame) {\r\n                mapTile = map[template[i][0]][template[i][1]];\r\n            }\r\n            mapTile.tile = 'empty';\r\n            mapTile.object = traps[randomNumber(0,traps.length - 1)];\r\n            if (options.tutorial && options.newgame) {\r\n                mapTile.object = traps[i];\r\n            }\r\n            mapTile.contents = 'trap';\r\n            mapTile.trapDamage = damageFromTraps;\r\n            trapArray.push(mapTile);\r\n            locationArray.shift();\r\n        }\r\n    }\r\n\r\n    buildGrid();\r\n}\r\n\r\n// Build grid one row at a time\r\nfunction buildGrid() {\r\n    console.log('buildGrid');\r\n    // Select a random level template style\r\n    levelTemplates = ['single','dual','corners','tri-corners'];\r\n    template = levelTemplates[randomNumber(0,levelTemplates.length - 1)];\r\n    wallTorches = randomNumber(0,1);\r\n    if (options.tutorial && options.newgame || options.endgame) {\r\n        template = 'corners';\r\n        wallTorches = 1;\r\n    }\r\n    captive = 0;\r\n    exitTileset = '';\r\n\r\n    for (var i = 0; i < numberOfRows; i++) {\r\n        buildRow(i);\r\n    }\r\n    // Add shadow class to first row\r\n    document.querySelector('#level-container .row').id = 'shadow-top';\r\n    // Level exit\r\n    levelExit = document.getElementById(exit.location);\r\n    levelExit.style.backgroundImage = 'url(\"img/exit.gif\")'\r\n    levelExit.style.overflow = 'hidden';\r\n    var cover = document.createElement('img');\r\n        cover.src = exitTileset;\r\n        cover.style.width = '100%';\r\n        cover.style.height = '100%';\r\n        levelExit.appendChild(cover);\r\n    columnPositions = [];\r\n    for (var i = 0; i < columnArray.length; i++) {\r\n        var cell = document.getElementById(columnArray[i].location).getBoundingClientRect();\r\n        columnPositions.push(cell);\r\n    }\r\n    if (options.endgame) {\r\n        theEnd();\r\n    }\r\n    else {\r\n        addMath();\r\n    }\r\n}\r\n\r\n\r\n// Build rows as needed to populate the grid\r\nfunction buildRow(row) {\r\n    var newRow = document.createElement('div');\r\n        newRow.classList.add('row');\r\n    for (var i = 0; i < numberOfColumns; i++) {\r\n        var cell = document.createElement('div');\r\n            cell.classList.add('cell');\r\n            cell.style.width = cellSize + 'px';\r\n            cell.style.height = cellSize + 'px';\r\n            // Give it an ID to match the location\r\n            cell.id = map[row][i].location;\r\n            var tileGraphic = applyTileset(map[row][i]);\r\n            cell.style.backgroundImage = tileGraphic;\r\n            if (map[row][i].object) {\r\n                var object = document.createElement('img');\r\n                    object.src = 'img/objects/' + map[row][i].object + '.gif';\r\n                if (map[row][i].object === 'wall') {\r\n                    if (hero.bossLevel) {\r\n                        wallTorches = 0;\r\n                        var prisoner = document.createElement('img');\r\n                            prisoner.src = 'img/objects/knight-' + hero.knights[captive].number + '.gif';\r\n                            prisoner.classList.add('prisoner');\r\n                            cell.appendChild(prisoner);\r\n                            captive++;\r\n                    }\r\n                    else if (wallTorches === 1) {\r\n                        cell.classList.add('torch');\r\n                    }\r\n                    object.src = 'img/objects/wall-' + wallTileset + '.gif';\r\n                    object.className = 'wall';\r\n                }\r\n                else if (map[row][i].object.includes('knight')) {\r\n                    object.className = 'knight';\r\n                }\r\n                cell.appendChild(object);\r\n            }\r\n        cell.addEventListener('click', fastTravel);\r\n        newRow.appendChild(cell);\r\n    }\r\n    levelContainer.appendChild(newRow);\r\n}\r\n\r\n\r\n// Grab the content value of the desired cell and apply the appropriate graphic\r\nfunction applyTileset(e) {\r\n    var tile = e.tile;\r\n    if (tile === 'empty' || tile === 'exit') {\r\n        // Apply same tileset to entire map\r\n        if (template === 'single') {\r\n            var tileset = 'img/tiles/' + tilesetNumber + '/empty' + randomNumber(1,empty) + '.gif'; \r\n        }\r\n        // Border the map with one tileset, then fill the middle with another\r\n        else if (template === 'dual') {\r\n            if (e.row === 1 || e.row === numberOfRows || e.col === 1 || e.col === numberOfColumns) {\r\n                var tileset = 'img/tiles/' + tilesetInside + '/empty' + randomNumber(1,empty) + '.gif'; \r\n            }\r\n            else {\r\n                var tileset = 'img/tiles/' + tilesetNumber + '/empty' + randomNumber(1,empty) + '.gif'; \r\n            }\r\n        }\r\n        // Border map except for corners\r\n        else if (template === 'corners') {\r\n            if (e.row === 1 || e.row === numberOfRows) {\r\n                if (e.col === 1 || e.col === numberOfColumns) {\r\n                    var tileset = 'img/tiles/' + tilesetInside + '/empty' + randomNumber(1,empty) + '.gif'; \r\n                }\r\n                else {\r\n                    var tileset = 'img/tiles/' + tilesetNumber + '/empty' + randomNumber(1,empty) + '.gif'; \r\n                }\r\n            }\r\n            else if (e.col === 1 || e.col === numberOfColumns) {\r\n                var tileset = 'img/tiles/' + tilesetNumber + '/empty' + randomNumber(1,empty) + '.gif'; \r\n            }\r\n            else {\r\n                var tileset = 'img/tiles/' + tilesetInside + '/empty' + randomNumber(1,empty) + '.gif'; \r\n            }\r\n        }\r\n        // Add larger corner sections\r\n        else if (template === 'tri-corners') {\r\n            if (e.row === 1 || e.row === numberOfRows) {\r\n                if (e.col === 1 || e.col === 2 || e.col === numberOfColumns || e.col === numberOfColumns - 1) {\r\n                    var tileset = 'img/tiles/' + tilesetNumber + '/empty' + randomNumber(1,empty) + '.gif'; \r\n                }\r\n                else {\r\n                    var tileset = 'img/tiles/' + tilesetInside + '/empty' + randomNumber(1,empty) + '.gif'; \r\n                }\r\n            }\r\n            else if (e.row === 2 || e.row === numberOfRows - 1) {\r\n                if (e.col === 1 || e.col === numberOfColumns) {\r\n                    var tileset = 'img/tiles/' + tilesetNumber + '/empty' + randomNumber(1,empty) + '.gif'; \r\n                }\r\n                else {\r\n                    var tileset = 'img/tiles/' + tilesetInside + '/empty' + randomNumber(1,empty) + '.gif'; \r\n                }\r\n            }\r\n            else {\r\n                var tileset = 'img/tiles/' + tilesetInside + '/empty' + randomNumber(1,empty) + '.gif'; \r\n            }\r\n        }\r\n    }\r\n    // If object, apply object image\r\n    else {\r\n        var tileset = 'url(\"img/' + tile + '.gif\")';\r\n    }\r\n    // Apply correct tileset to exit cover\r\n    if (e.contents === 'exit') {\r\n        exitTileset = tileset;\r\n    }\r\n    else {\r\n        tileset = 'url(\"' + tileset + '\")';\r\n    }\r\n    return tileset;\r\n}\r\n\r\n\r\n// Make changes for special trap types\r\nfunction handleTraps() {\r\n    for (var i = 0; i < trapArray.length; i++) {\r\n        // Turn fire grate on and off\r\n        if (trapArray[i].object === 'fire-grate') {\r\n                (function() {\r\n                var currentLevel = hero.gameLevel;\r\n                var mapLocation = map[trapArray[i].row - 1][trapArray[i].col - 1];\r\n                    mapLocation.contents = 'empty';\r\n                var interval = randomNumber(5000,10000);\r\n                var grate = document.querySelector('#' + trapArray[i].location + ' img');\r\n                var burnInterval = setInterval(function() {\r\n                    if (currentLevel === hero.gameLevel) {\r\n                        grate.src = 'img/objects/fire-grate-on.gif';\r\n                        mapLocation.contents = 'trap';\r\n                        if (mapLocation.location === hero.location) {\r\n                            checkForTraps();\r\n                        }\r\n                        setTimeout(function() {\r\n                            grate.src = 'img/objects/fire-grate.gif';\r\n                            mapLocation.contents = 'empty';\r\n                        }, 3000);\r\n                    }\r\n                    else {\r\n                        clearInterval(burnInterval);\r\n                    }\r\n                }, interval);\r\n            }());\r\n        }\r\n    }\r\n}","/////////////// BUILD_MATH ///////////////\r\n\r\n// Reset variables and route to the selected game mode\r\nfunction addMath() {\r\n    console.log('addMath');\r\n    if (hero.bossLevel) {\r\n        var mode = gameMode[randomNumber(0,gameMode.length - 1)];\r\n        hero.bossLevel = hero.bosses[randomNumber(0,hero.bosses.length - 1)];\r\n    }\r\n    if (hero.challengeMode) {\r\n        var mode = challengeMode[randomNumber(0,challengeMode.length - 1)];\r\n    }\r\n    else if (options.tutorial && options.newgame) {\r\n        var mode = tutorialData.gameMode;\r\n        document.querySelector('#top-bar .btn-options').style.pointerEvents = 'none';\r\n        document.getElementById('top-bar').style.opacity = 0;\r\n        document.getElementById('healthbar').style.opacity = 0;\r\n        document.getElementById('xpbar').style.opacity = 0;\r\n    }\r\n    else {\r\n        var mode = gameMode[randomNumber(0,gameMode.length - 1)];\r\n    }\r\n\r\n    hero.gameMode = mode;\r\n    hero.answers = 0;\r\n    hero.answersNeeded = 0;\r\n    // Calculate the number of valid spaces that are available\r\n    var total = 0;\r\n    var correctNeeded = 0;\r\n    var incorrectNeeded = 0;\r\n    for (var r = 0; r < numberOfRows; r++) {\r\n        for (var c = 0; c < numberOfColumns; c++) {\r\n            if (map[r][c].contents === 'empty') {\r\n                total++;\r\n            }\r\n        }\r\n    }\r\n    // Add math for exit location\r\n    total++;\r\n    // Calculate the number of valid and invalid answers needed to generate\r\n    correctNeeded = Math.ceil(total * (randomNumber(correctMinThreshold,correctMaxThreshold) / 100));\r\n    incorrectNeeded = total - correctNeeded;\r\n    hero.answersNeeded = correctNeeded;\r\n\r\n    // Traditional Game Modes\r\n    if (mode === 'multiples') {\r\n        multiples(total,correctNeeded,incorrectNeeded,displayMath);\r\n    }\r\n    else if (mode === 'factors') {\r\n        factors(total,correctNeeded,incorrectNeeded,displayMath);\r\n    }\r\n    else if (mode === 'primes') {\r\n        primes(total,correctNeeded,incorrectNeeded,displayMath);\r\n    }\r\n    else if (mode === 'equality') {\r\n        equality(total,correctNeeded,incorrectNeeded,displayMath);\r\n    }\r\n    // Challenge Modes\r\n    else if (mode === 'ascending' || mode === 'descending') {\r\n        ascendingDescending(total,displayMath);\r\n    }\r\n}\r\n\r\n\r\n// Generate list of correct and incorrect multiples\r\nfunction multiples(total,correct,incorrect,callback) {\r\n\r\n    var difficulty = [\r\n        {\r\n            // EASY\r\n            min: 2,\r\n            max: 10,\r\n            highest: 50\r\n        },\r\n        {\r\n            // MEDIUM\r\n            min: 5,\r\n            max: 25,\r\n            highest: 100\r\n        },\r\n        {\r\n            // HARD\r\n            min: 10,\r\n            max: 50,\r\n            highest: 200\r\n        }\r\n    ];\r\n    target = randomNumber(difficulty[hero.difficultyMath - 1].min, difficulty[hero.difficultyMath - 1].max);\r\n    if (options.tutorial && options.newgame) {\r\n        target = tutorialData.target;\r\n    }\r\n    var correctArray = [];\r\n    var incorrectArray = [];\r\n    var highestValue = difficulty[hero.difficultyMath - 1].highest;\r\n    var highestMultiple = Math.floor(highestValue / target);\r\n\r\n    var correctCounter = 0;\r\n    var incorrectCounter = 0;\r\n\r\n    // Route answers to one of two arrays\r\n    for (var i = 0; i < total; i++) {\r\n        // Generate correct answers\r\n        if (correctArray.length < correct) {\r\n            answer = { number: randomNumber(1,highestMultiple) * target, answer: true };\r\n            if (answer.number % target === 0) {\r\n                correctArray.push(answer);\r\n            }\r\n            correctCounter++;\r\n        }\r\n        // Generate false answers\r\n        else if (incorrectArray.length < incorrect) {\r\n            answer = { number: randomNumber(2,highestValue), answer: false };\r\n            if (answer.number % target !== 0) {\r\n                incorrectArray.push(answer);\r\n            }\r\n            else {\r\n                answer.number--;\r\n                if (answer.number % target !== 0) {\r\n                    incorrectArray.push(answer);\r\n                }\r\n                else {\r\n                    i--;\r\n                }\r\n            }\r\n            incorrectCounter++;\r\n        }\r\n    }\r\n\r\n    // Concat both arrays together and then shuffle\r\n    var finalArray = correctArray.concat(incorrectArray);\r\n    finalArray = shuffle(finalArray);\r\n    document.getElementById('game-mode').innerHTML = 'Multiples of ' + target;\r\n    // Send to the display function\r\n    callback(finalArray,fadeIn);\r\n}\r\n\r\n\r\n// Generate list of correct and incorrect factors\r\nfunction factors(total,correct,incorrect,callback) {\r\n\r\n    var difficulty = [\r\n        {\r\n            // EASY\r\n            min: 20,\r\n            max: 40,\r\n\r\n        },\r\n        {\r\n            // MEDIUM\r\n            min: 40,\r\n            max: 100,\r\n        },\r\n        {\r\n            // HARD\r\n            min: 50,\r\n            max: 200,\r\n        }\r\n    ];\r\n\r\n    target = randomNumber(difficulty[hero.difficultyMath - 1].min, difficulty[hero.difficultyMath - 1].max);\r\n    var safeArray = [];\r\n    var unsafeArray = [];\r\n    var correctArray = [];\r\n    var incorrectArray = [];\r\n\r\n    var counter = 0;\r\n\r\n    // Generate list of safe numbers\r\n    for (var i = 1; i <= target; i++) {\r\n        if (target % i === 0) {\r\n            safeArray.push(i);\r\n        }\r\n        // Add to wrong answers\r\n        else {\r\n            unsafeArray.push(i);\r\n        }\r\n    }\r\n\r\n    // Route random numbers to one of two arrays\r\n    for (var i = 0; i < total; i++) {\r\n        if (correctArray.length < correct) {\r\n            answer = { number: safeArray[randomNumber(0,safeArray.length - 1)], answer: true };\r\n            correctArray.push(answer);\r\n        }\r\n        else if (incorrectArray.length < incorrect){\r\n            answer = { number: unsafeArray[randomNumber(0,unsafeArray.length - 1)], answer: false };\r\n            incorrectArray.push(answer);\r\n        }\r\n        counter++;\r\n    }\r\n\r\n    // Concat both arrays together and then shuffle\r\n    var finalArray = correctArray.concat(incorrectArray);\r\n    finalArray = shuffle(finalArray);\r\n    document.getElementById('game-mode').innerHTML = 'Factors of ' + target;\r\n    // Send to the display function\r\n    callback(finalArray,fadeIn);\r\n}\r\n\r\n\r\n// Generate list of prime numbers\r\nfunction primes(total,correct,incorrect,callback) {\r\n\r\n        var difficulty = [\r\n        {\r\n            // EASY\r\n            max: 50\r\n\r\n        },\r\n        {\r\n            // MEDIUM\r\n            max: 100\r\n        },\r\n        {\r\n            // HARD\r\n            max: 200\r\n        }\r\n    ];\r\n    var correctArray = [];\r\n    var incorrectArray = [];\r\n    generatePrimeNumbers(difficulty[hero.difficultyMath - 1].max);\r\n\r\n    var counter = 0;\r\n\r\n    // Route random numbers to one of two arrays\r\n    for (var i = 0; i < total; i++) {\r\n        answer = { number: nonPrimes[randomNumber(0,nonPrimes.length - 1)], answer: false };\r\n        if (correctArray.length < correct) {\r\n            answer = { number: primes[randomNumber(0,primes.length - 1)], answer: true };\r\n            correctArray.push(answer);\r\n        }\r\n        else if (incorrectArray.length < incorrect) {\r\n            answer = { number: nonPrimes[randomNumber(0,nonPrimes.length - 1)], answer: false };\r\n            incorrectArray.push(answer);\r\n        }\r\n        else {\r\n            i--;\r\n        }\r\n        counter++;\r\n    }\r\n\r\n    // Concat both arrays together and then shuffle\r\n    var finalArray = correctArray.concat(incorrectArray);\r\n    finalArray = shuffle(finalArray);\r\n    document.getElementById('game-mode').innerHTML = 'Prime Numbers';\r\n    // Send to the display function\r\n    callback(finalArray,fadeIn);\r\n}\r\n\r\n\r\n// Generate an array of prime numbers up to the number given\r\nfunction generatePrimeNumbers(max) {\r\n\r\n    var numbers = [];\r\n    primes = [];\r\n    nonPrimes = [];\r\n\r\n    for (var i = 2; i <= max; i++) {\r\n        numbers.push(i);   \r\n    }\r\n    while (numbers.length) {\r\n        primes.push(numbers.shift());\r\n        numbers = numbers.filter(function(i) {\r\n            if (i % primes[primes.length - 1] === 0) {\r\n                nonPrimes.push(i);\r\n            }\r\n            return i % primes[primes.length - 1] != 0;\r\n        });\r\n    }\r\n}\r\n\r\n\r\n// Generate list of correct and incorrect equality formulas\r\nfunction equality(total,correct,incorrect,callback) {\r\n\r\n        var difficulty = [\r\n        {\r\n            // EASY\r\n            min: 4,\r\n            max: 15,\r\n            highest: 25,\r\n            deviation: 10\r\n        },\r\n        {\r\n            // MEDIUM\r\n            min: 15,\r\n            max: 50,\r\n            highest: 75,\r\n            deviation: 10\r\n        },\r\n        {\r\n            // HARD\r\n            min: 50,\r\n            max: 100,\r\n            highest: 150,\r\n            deviation: 10\r\n        }\r\n    ];\r\n\r\n    target = randomNumber(difficulty[hero.difficultyMath - 1].min, difficulty[hero.difficultyMath - 1].max);\r\n    var correctArray = [];\r\n    var incorrectArray = [];\r\n    var safeMultiples = [];\r\n    var unsafeMultiples = [];\r\n    var safeFactors = [];\r\n    var unsafeFactors = [];\r\n    var symbols = ['+','-','*','/'];\r\n    var highestValue = difficulty[hero.difficultyMath - 1].highest;\r\n    var deviation = difficulty[hero.difficultyMath - 1].deviation;\r\n\r\n    // Generate list of safe multiples\r\n    for (var i = 1; i <= target; i++) {\r\n        if (target % i === 0) {\r\n            safeMultiples.push(i);\r\n        }\r\n        // Add to wrong answers\r\n        else {\r\n            unsafeMultiples.push(i);\r\n        }\r\n    }\r\n\r\n    // Generate list of safe factors\r\n    for (var i = 1; i <= highestValue; i++) {\r\n        if (i % target === 0) {\r\n            safeFactors.push(i);\r\n        }\r\n        // Add to wrong answers\r\n        else {\r\n            unsafeFactors.push(i);\r\n        }\r\n    }\r\n\r\n    // Loop through the total number of formulas needed\r\n    for (var i = 0; i < total; i++) {\r\n        var equation = '';\r\n        var equationString = '';\r\n        var symbol = symbols[randomNumber(0,symbols.length - 1)];\r\n        var num1 = randomNumber(1,target);\r\n        \r\n        // Create addition equations\r\n        if (symbol === '+') {\r\n            // Generate correct answers\r\n            if (correctArray.length < correct) {\r\n                var num2 = target - num1;\r\n                equationString = num1 + symbol + num2;\r\n                answer = { number: equationString, answer: true };\r\n                correctArray.push(answer);\r\n            }\r\n            // Generate false answers\r\n            else if (incorrectArray.length < incorrect) {\r\n                var num2 = target - num1;\r\n                    num2 += randomNumber(1,deviation);\r\n                equationString = num1 + symbol + num2;\r\n                answer = { number: equationString, answer: false };\r\n                incorrectArray.push(answer);\r\n            }\r\n        }\r\n\r\n        // Create subtraction equations\r\n        else if (symbol === '-') {\r\n            // Generate correct answers\r\n            if (correctArray.length < correct) {\r\n                var num2 = target + num1;\r\n                equationString = num2 + symbol + num1;\r\n                answer = { number: equationString, answer: true };\r\n                correctArray.push(answer);\r\n            }\r\n            // Generate false answers\r\n            else if (incorrectArray.length < incorrect) {\r\n                var num2 = target + num1;\r\n                    num2 += randomNumber(1,deviation);\r\n                equationString = num2 + symbol + num1;\r\n                answer = { number: equationString, answer: false };\r\n                incorrectArray.push(answer);\r\n            }\r\n        }\r\n\r\n        // Create multiplication equations\r\n        else if (symbol === '*') {\r\n            // Generate correct answers\r\n            if (correctArray.length < correct) {\r\n                var num1 = safeMultiples[randomNumber(0,safeMultiples.length - 1)];\r\n                var num2 = target / num1;\r\n                equationString = num1 + '&times;' + num2;\r\n                answer = { number: equationString, answer: true };\r\n                correctArray.push(answer);\r\n            }\r\n            // Generate false answers\r\n            else if (incorrectArray.length < incorrect) {\r\n                var num1 = unsafeMultiples[randomNumber(0,unsafeMultiples.length - 1)];\r\n                var num2 = randomNumber(1,deviation);\r\n                equationString = num1 + '&times;' + num2;\r\n                answer = { number: equationString, answer: false };\r\n                incorrectArray.push(answer);\r\n            }\r\n        }\r\n\r\n        // Create division equations\r\n        else if (symbol === '/') {\r\n            // Generate correct answers\r\n            if (correctArray.length < correct) {\r\n                var num1 = safeFactors[randomNumber(0,safeFactors.length - 1)];\r\n                var num2 = num1 / target;\r\n                equationString = num1 + '&divide;' + num2;\r\n                answer = { number: equationString, answer: true };\r\n                correctArray.push(answer);\r\n            }\r\n            // Generate false answers\r\n            else if (incorrectArray.length < incorrect) {\r\n                var num1 = unsafeFactors[randomNumber(0,unsafeFactors.length - 1)];\r\n                var num2 = randomNumber(1,deviation);\r\n                equationString = num1 + '&divide;' + num2;\r\n                answer = { number: equationString, answer: false };\r\n                incorrectArray.push(answer);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Concat both arrays together and then shuffle\r\n    var finalArray = correctArray.concat(incorrectArray);\r\n    finalArray = shuffle(finalArray);\r\n    document.getElementById('game-mode').innerHTML = 'Equals ' + target;\r\n    // Send to the display function\r\n    callback(finalArray,fadeIn);\r\n}\r\n\r\n// Generate list of ascending or descending random values\r\nfunction ascendingDescending(total,callback) {\r\n    var difficulty = [\r\n        {\r\n            // EASY\r\n            min: 1,\r\n            max: totalCells,\r\n\r\n        },\r\n        {\r\n            // MEDIUM\r\n            min: 1,\r\n            max: totalCells * 2,\r\n        },\r\n        {\r\n            // HARD\r\n            min: 1,\r\n            max: totalCells * 4,\r\n        }\r\n    ];\r\n\r\n    var finalArray = [];\r\n    var numberArray = [];\r\n    for (var i = 0; i < total; i++) {\r\n        var number = randomNumber(difficulty[hero.difficultyMath - 1].min, difficulty[hero.difficultyMath - 1].max);\r\n        if (numberArray.indexOf(number) == -1) {\r\n            answer = { number: number, answer: true };\r\n            finalArray.push(answer);\r\n            numberArray.push(number);\r\n        }\r\n        else {\r\n            i--;\r\n        }\r\n    }\r\n    if (hero.gameMode === 'ascending') {\r\n        numberArray.sort( function(a,b) { return a - b; } );\r\n        var modeText = 'Ascending Order';\r\n    }\r\n    else if (hero.gameMode === 'descending') {\r\n        numberArray.sort( function(a,b) { return b - a; } );\r\n        var modeText = 'Descending Order';\r\n    }\r\n    hero.ascending = numberArray;\r\n    hero.answersNeeded = total;\r\n    document.getElementById('game-mode').innerHTML = modeText;\r\n    // Send to the display function\r\n    callback(finalArray,fadeIn);\r\n}\r\n\r\n\r\n// Take the combined array of answers, shuffle it, then return it\r\nfunction shuffle(array) {\r\n\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n  return array;\r\n}\r\n\r\n// Place all of the math formulas into the grid\r\nfunction displayMath(finalArray,callback) {\r\n    console.log('displayMath');\r\n    var i = 0;\r\n    var safety = 0;\r\n    for (var r = 0; r < numberOfRows; r++) {\r\n        for (var c = 0; c < numberOfColumns; c++) {\r\n            if (map[r][c].contents === 'empty' || map[r][c].contents === 'exit') {\r\n                map[r][c].number = finalArray[i].number;\r\n                map[r][c].answer = finalArray[i].answer;\r\n                var cell = document.getElementById(map[r][c].location);\r\n                var equation = document.createElement('p');\r\n                    equation.style.fontSize = cellFontSize;\r\n                if (options.tutorial && options.newgame) {\r\n                    equation.style.opacity = '0';\r\n                }\r\n                equation.innerHTML = finalArray[i].number;\r\n                if (cell !== null) {\r\n                    cell.appendChild(equation);\r\n                    i++;\r\n                }\r\n                else if (safety > 100) {\r\n                    console.log('STOP!! displayMath');\r\n                    break;\r\n                }\r\n                else {\r\n                    safety++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    callback();\r\n    handleTraps();\r\n    if (options.tutorial) {\r\n        startTutorial();\r\n    }\r\n}\r\n\r\n\r\n// Slide open exit cover\r\nfunction openExitCover() {\r\n    if (hero.answers >= hero.answersNeeded && options.tutorial === false) {\r\n        var exitAnswer = document.querySelector('#' + levelExit.id + ' p');\r\n        if (exitAnswer !== null) {\r\n            exitAnswer.style.opacity = '0';\r\n        }\r\n        setTimeout(function() {\r\n            var exitCover = document.querySelector('#' + levelExit.id + ' img');\r\n                exitCover.style.transition = '2.25s ease-in-out';\r\n                exitCover.style.transform = 'translateY(-100%)';\r\n            document.getElementById('game-mode').innerHTML = 'Level Complete!';\r\n        }, 1500);\r\n        // Fade out all incorrect answers\r\n        var maths = document.querySelectorAll('.cell p');\r\n        for (var i = 0; i < maths.length; i++) {\r\n            maths[i].style.opacity = '0';\r\n            hero.canCapture = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// When activating a square check if answer is correct\r\nfunction checkMath() {\r\n    var correct = false;\r\n    // Get the hero location so you can check the appropriate map data\r\n    var munchLocation = map[hero.row - 1][hero.col - 1];\r\n    // Prevent from capturing a tile more than once\r\n    if (munchLocation.answer === 'captured' || hero.canCapture === false || !munchLocation.hasOwnProperty('answer')) {\r\n        return;\r\n    }\r\n    // Ascending or Descending Order\r\n    else if (munchLocation.number === hero.ascending[0]) {\r\n        correct = true;\r\n        munchLocation.answer = 'captured';\r\n        hero.ascending.shift();\r\n    }\r\n    else if (munchLocation.answer && hero.challengeMode === false) {\r\n        correct = true;\r\n    }\r\n    if (correct) {\r\n        if (hero.timer + timeRestoreFromCapture < 100) {\r\n            hero.timer += timeRestoreFromCapture;\r\n        }\r\n        else {\r\n            hero.timer = 100;\r\n        }\r\n        hero.answers++;\r\n        restoreHealth(healthRestoreFromCapture);\r\n        munchLocation.answer = 'captured';\r\n        var square = document.querySelector('#' + munchLocation.location + ' p');\r\n        setTimeout(function() {\r\n            if (square === null) {\r\n\r\n            }\r\n            else {\r\n                square.remove();\r\n            }\r\n        }, 250);\r\n        if (hero.answers === hero.answersNeeded) {\r\n            if (hero.bossLevel && hero.bossIsDead) {\r\n                openExitCover();\r\n            }\r\n            else if (hero.bossLevel === false) {\r\n                openExitCover();\r\n            }\r\n        }\r\n\r\n        if (hero.gameMode === 'multiples') {\r\n            hero.multiplesRight++;\r\n        }\r\n        else if (hero.gameMode === 'factors') {\r\n            hero.factorsRight++;\r\n        }\r\n        else if (hero.gameMode === 'primes') {\r\n            hero.primesRight++;\r\n        }\r\n        else if (hero.gameMode === 'equality') {\r\n            hero.equalsRight++;\r\n        }\r\n\r\n        // Flash tile\r\n        var flash = document.createElement('span');\r\n            flash.classList.add('flash');\r\n            square.parentElement.appendChild(flash);\r\n        setTimeout(function() {\r\n            flash.remove();\r\n        }, 600);\r\n        \r\n    }\r\n    else if (!munchLocation.hasOwnProperty(\"answer\")) {\r\n\r\n    }\r\n    else {\r\n        if (hero.gameMode === 'multiples') {\r\n            hero.multiplesWrong++;\r\n        }\r\n        else if (hero.gameMode === 'factors') {\r\n            hero.factorsWrong++;\r\n        }\r\n        else if (hero.gameMode === 'primes') {\r\n            hero.primesWrong++;\r\n        }\r\n        else if (hero.gameMode === 'equality') {\r\n            hero.equalsWrong++;\r\n        }\r\n        hero.timer -= timeLostFromWrongAnswer;\r\n        flashHitImage(hero,player);\r\n        dealDamage(damageFromWrongAnswer,'wrong answer');\r\n    }\r\n}","/////////////// MONSTER_MANUAL ///////////////\r\n\r\n// My Monster Manual\r\nvar bestiary = [\r\n    {\r\n        type: 'Bat',\r\n        boss: false,\r\n        image: 'bat.gif',\r\n        baseDamage: 2,\r\n        health: 30,\r\n        weight: 10,\r\n        evasion: 10,\r\n        moveInterval: 1500,\r\n        moveSpeed: 0.5,\r\n        moveType: 'aggressive',\r\n        info: 'Bats are quick, and not much of a threat alone, but can easily overcome you in larger numbers. They can also fly over obstacles to reach you.'\r\n    },\r\n    {\r\n        type: 'Gelatinous Cube',\r\n        boss: false,\r\n        image: 'cube-green.gif',\r\n        baseDamage: 10,\r\n        health: 50,\r\n        weight: 20,\r\n        evasion: 5,\r\n        moveInterval: 2100,\r\n        moveSpeed: 2,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'acid',\r\n                abilityDamge: 5,\r\n                abilityDuration: 5500,\r\n                abilityChance: 100\r\n            }\r\n        ],\r\n        info: 'A slow moving gelatinous mass that leaves a trail of corrosive acid in its wake.'\r\n    },\r\n    {\r\n        type: 'Giant Spider',\r\n        boss: false,\r\n        image: 'spider.gif',\r\n        baseDamage: 10,\r\n        health: 65,\r\n        weight: 30,\r\n        evasion: 15,\r\n        moveInterval: 2000,\r\n        moveSpeed: 0.35,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'web',\r\n                abilityDamge: 0,\r\n                trapDuration: 3000,\r\n                abilityDuration: 12000,\r\n                abilityChance: 20\r\n            }\r\n        ],\r\n        info: 'Spiders are quick, and can poison you with their bite. The webs they leave behind can immobilize you for a short period of time.'\r\n    },\r\n    {\r\n        type: 'Number Mage',\r\n        boss: false,\r\n        image: 'number-mage.gif',\r\n        baseDamage: 5,\r\n        health: 85,\r\n        weight: 15,\r\n        evasion: 10,\r\n        moveInterval: 3000,\r\n        moveSpeed: 0.5,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'rotate',\r\n                abilityDamge: 0,\r\n                abilityDuration: 10000,\r\n                abilityChance: 80\r\n            }\r\n        ],\r\n        info: 'The Number Mage is not a threat in the usual sense. They do almost no damage, but cast magic to cloud your mind and make equations more difficult to solve.'\r\n    },\r\n    {\r\n        type: 'Oculord',\r\n        boss: false,\r\n        image: 'oculord.gif',\r\n        baseDamage: 15,\r\n        health: 100,\r\n        weight: 50,\r\n        evasion: 10,\r\n        moveInterval: 3000,\r\n        moveSpeed: 2.5,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'projectile',\r\n                abilityImage: ['projectile-fire.gif', 'projectile-ice.gif'],\r\n                abilityDamge: 15,\r\n                damageDuration: 3000,\r\n                abilityDuration: 0.45,\r\n                abilityChance: 75,\r\n                targetChance: 75\r\n            }\r\n        ],\r\n        info: 'Oculords can shoot both ice and fire from one of the many magical eye stalks that grow from their bodies.'\r\n    },\r\n    {\r\n        type: 'Vampire',\r\n        boss: false,\r\n        image: 'vampire.gif',\r\n        baseDamage: 15,\r\n        health: 125,\r\n        weight: 50,\r\n        evasion: 10,\r\n        moveInterval: 3000,\r\n        moveSpeed: 1,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'invisibility',\r\n                abilityDamge: 0.6,\r\n                abilityDuration: 10000,\r\n                abilityChance: 70\r\n            }\r\n        ],\r\n        info: 'These blood sucking fiends have the ability to turn mostly invisible for a period of time. While under this effect they can drain your life within a short range.'\r\n    }\r\n];\r\n\r\n\r\n// My Boss Monster Manual\r\nvar bosses = [\r\n    {\r\n        type: 'Spider Queen',\r\n        boss: true,\r\n        image: 'spider-queen.gif',\r\n        baseDamage: 15,\r\n        health: 500,\r\n        weight: 50,\r\n        evasion: 5,\r\n        moveInterval: 2100,\r\n        moveSpeed: 2,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'acid',\r\n                abilityDamge: 5,\r\n                abilityDuration: 5500,\r\n                abilityChance: 80\r\n            },\r\n            {\r\n                ability: 'projectile',\r\n                abilityImage: ['projectile-poison.gif'],\r\n                abilityDamge: 1.15,\r\n                damageDuration: 3000,\r\n                dotStatus: 'poisoned!',\r\n                abilityDuration: 0.45,\r\n                abilityChance: 90,\r\n                targetChance: 100\r\n            },\r\n        ],\r\n        info: 'The Spider Queen resides in a large lair within these dungeon walls. She has a powerful poison, and many smaller minions that will stop at nothing to protect their Queen.'\r\n    },\r\n    {\r\n        type: 'Vampire Lord',\r\n        boss: true,\r\n        image: 'vampire-lord.gif',\r\n        baseDamage: 10,\r\n        health: 500,\r\n        weight: 70,\r\n        evasion: 5,\r\n        moveInterval: 1900,\r\n        moveSpeed: 1.5,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'invisibility',\r\n                abilityDamge: 0.9,\r\n                abilityDuration: 7000,\r\n                abilityChance: 70\r\n            },\r\n            {\r\n                ability: 'projectile',\r\n                abilityImage: ['projectile-ice.gif'],\r\n                abilityDamge: 5,\r\n                damageDuration: 1900,\r\n                dotStatus: 'frozen!',\r\n                abilityDuration: 0.45,\r\n                abilityChance: 100,\r\n                targetChance: 100\r\n            },\r\n        ],\r\n        info: 'The Vampire Lord has a powerful short range life drain ability while he remains invisible. His ice projectiles can freeze you in place so that his swarm of bat minions can overtake you.'\r\n    },\r\n    {\r\n        type: 'Red Knight',\r\n        boss: true,\r\n        image: 'red-knight.gif',\r\n        baseDamage: 10,\r\n        health: 225,\r\n        weight: 50,\r\n        evasion: 5,\r\n        moveInterval: 2200,\r\n        moveSpeed: 1.2,\r\n        moveType: 'passive',\r\n        cooldownTimer: 4000,\r\n        abilities: [\r\n            {\r\n                ability: 'burst',\r\n                abilityImage: ['projectile-fire.gif'],\r\n                abilityDamge: 8,\r\n                damageDuration: 3000,\r\n                abilityDuration: 0.35,\r\n                burstSpeed: 350,\r\n                shots: 0,\r\n                abilityChance: 85,\r\n                targetChance: 100\r\n            }\r\n        ],\r\n        info: 'The first of the Three Knights, the Red Knight hurls fireballs in rapid bursts to deal immense damage to their victim.'\r\n    },\r\n    {\r\n        type: 'Blue Knight',\r\n        boss: true,\r\n        image: 'blue-knight.gif',\r\n        baseDamage: 10,\r\n        health: 225,\r\n        weight: 50,\r\n        evasion: 5,\r\n        moveInterval: 2200,\r\n        moveSpeed: 1.2,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'ice',\r\n                abilityDamge: 5,\r\n                trapDuration: 1000,\r\n                abilityDuration: 5500,\r\n                abilityChance: 80\r\n            },\r\n            {\r\n                ability: 'projectile',\r\n                abilityImage: ['projectile-ice.gif'],\r\n                abilityDamge: 10,\r\n                damageDuration: 2500,\r\n                dotStatus: 'frozen!',\r\n                abilityDuration: 0.9,\r\n                abilityChance: 100,\r\n                targetChance: 100\r\n            },\r\n        ],\r\n        info: 'The second of the Triumvarate, the Blue Knight leaves a trail of ice, and can shoot freezing orbs, locking their victim in place.'\r\n    },\r\n    {\r\n        type: 'Yellow Knight',\r\n        boss: true,\r\n        image: 'yellow-knight.gif',\r\n        baseDamage: 10,\r\n        health: 225,\r\n        weight: 50,\r\n        evasion: 5,\r\n        moveInterval: 2200,\r\n        moveSpeed: 1.2,\r\n        moveType: 'passive',\r\n        abilities: [\r\n            {\r\n                ability: 'projectile',\r\n                abilityImage: ['projectile-poison.gif'],\r\n                abilityDamge: 1.25,\r\n                damageDuration: 3000,\r\n                dotStatus: 'poisoned!',\r\n                abilityDuration: 0.45,\r\n                abilityChance: 90,\r\n                targetChance: 100\r\n            }\r\n        ],\r\n        info: 'The last of the three guardians, the Yellow Knight launches a powerful poisoned ball that deals damage over time to the effected victim.'\r\n    }\r\n];","/////////////// SPAWN_ENEMIES ///////////////\r\n\r\n// Start adding enemies based on monster difficulty\r\nfunction letTheGamesBegin() {\r\n    // Set up level timer\r\n    var timerInterval = 500;\r\n    var transition = timerInterval / 1000;\r\n        timeBar.style.transition = transition + 's linear';\r\n    var timerIncrement = (100 / defaultTimer) * (timerInterval / 1000);\r\n    var currentLevel = hero.gameLevel;\r\n    var dangerZone = 30;\r\n    // Start the level timer\r\n    var timerInterval = setInterval(function() {\r\n        // Start flashing bar if in the danger zone\r\n        if (hero.timer <= dangerZone) {\r\n            if (timeBar.classList.contains('time-danger')) {\r\n\r\n            }\r\n            else {\r\n                timeBar.classList.add('time-danger');\r\n            }\r\n        }\r\n        else if (hero.timer > dangerZone) {\r\n            timeBar.classList.remove('time-danger');\r\n        }\r\n        if (hero.pause) {\r\n\r\n        }\r\n        else if (currentLevel !== hero.gameLevel || map === null || hero === null || hero.bossLevel || hero.challengeMode || options.tutorial || options.endgame) {\r\n            clearInterval(timerInterval);\r\n        }\r\n        else {\r\n            hero.timer -= timerIncrement;\r\n            if (hero.timer <= 0 ) {\r\n                clearInterval(timerInterval);\r\n                dealDamage(1000000,'time');\r\n            }\r\n            else {\r\n                timeBar.style.width = hero.timer + '%';\r\n            }\r\n        }\r\n    }, timerInterval);\r\n\r\n    if (hero.difficultyMonster == 1) {\r\n        maxWeight = 60;\r\n        maxEnemies = 5;\r\n    }\r\n    else if (hero.difficultyMonster == 2) {\r\n        maxWeight = 120;\r\n        maxEnemies = 10;\r\n    }\r\n    else if (hero.difficultyMonster == 3) {\r\n        maxWeight = 200;\r\n        maxEnemies = 20;\r\n    }\r\n    levelData = { redKnight: false, blueKnight: false, yellowKnight: false };\r\n    // Gaining levels increases max weight\r\n    maxWeight += ((hero.level - 1) * 10);\r\n    // Gaining levels increases max number of enemies\r\n    if (hero.level % 2 === 0) {\r\n        maxEnemies += (hero.level / 2);\r\n    }\r\n    // If Boss Level\r\n    if (hero.bossLevel !== false || hero.challengeMode) {\r\n        maxWeight *= 2;\r\n        maxEnemies = 25;\r\n    }\r\n    // Get list of safe spawn locations\r\n    spawnArray = [];\r\n    try {\r\n        for (var r = 0; r < numberOfRows; r++) {\r\n            for (var c = 0; c < numberOfColumns; c++) {\r\n                var cell = map[r][c];\r\n                if (r === 0 || r === numberOfRows - 1) {\r\n                    if (cell.object && cell.contents !== 'trap') {\r\n                    }\r\n                    else {\r\n                        spawnArray.push(cell);\r\n                    }\r\n                }\r\n                else if (c === 0 || c === numberOfColumns -1) {\r\n                    if (cell.object && cell.contents !== 'trap') {\r\n                    }\r\n                    else {\r\n                        spawnArray.push(cell);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Spawn first enemy\r\n        var spawn = spawnArray[randomNumber(0,spawnArray.length - 1)];\r\n        getEnemy(spawn.row,spawn.col);\r\n    } catch(e) {\r\n        console.log('letTheGamesBegin ERROR');\r\n    }\r\n    // Start spawning enemies at an interval\r\n    if (options.tutorial === false) {\r\n        spawnEnemy();\r\n    }\r\n}\r\n\r\n\r\n// Spawn another enemy at a random interval\r\nfunction spawnEnemy() {\r\n    var spawnLevel = hero.gameLevel;\r\n    var spawnInterval = randomNumber(1000,3000);\r\n    var interval = setInterval(function() {\r\n        if (map === null || map.length === 0 || hero.bossIsDead || spawnLevel !== hero.gameLevel) {\r\n            clearInterval(interval);\r\n        }\r\n        else if (totalWeight < maxWeight && numberOfEnemies < maxEnemies) {\r\n            var spawn = spawnArray[randomNumber(0,spawnArray.length - 1)];\r\n            getEnemy(spawn.row,spawn.col);\r\n        }\r\n        else if (numberOfEnemies >= maxEnemies) {\r\n            clearInterval(interval);\r\n        }\r\n    }, spawnInterval);\r\n}\r\n\r\n\r\n// Select a random enemy from the bestiary\r\nfunction getEnemy(row,col) {\r\n    var monster = bestiary[randomNumber(0,bestiary.length - 1)];\r\n    // Boss Level Spawn\r\n    if (hero.bossLevel === 'Spider Queen') {\r\n        if (hero.bossHasSpawned === false) {\r\n            monster = bosses[0];\r\n            hero.bossHasSpawned = true;\r\n        }\r\n        else {\r\n            // Spawn spider minions\r\n            monster = bestiary[2];\r\n        }\r\n        addEnemy(row,col,monster);\r\n    }\r\n    else if (hero.bossLevel === 'Vampire Lord') {\r\n        if (hero.bossHasSpawned === false) {\r\n            monster = bosses[1];\r\n            hero.bossHasSpawned = true;\r\n        }\r\n        else {\r\n            // Spawn bat minions\r\n            monster = bestiary[0];\r\n        }\r\n        addEnemy(row,col,monster);\r\n    }\r\n    else if (hero.bossLevel === 'Red Knight') {\r\n        maxEnemies = 3;\r\n        maxWeight = 1000;\r\n        // Start with Red Knight\r\n        if (hero.bossLevel === 'Red Knight' && levelData.redKnight === false) {\r\n            monster = bosses[2];\r\n            hero.bossHasSpawned = true;\r\n            levelData.redKnight = 'alive';\r\n        }\r\n        else if (hero.bossLevel === 'Red Knight') {\r\n            // Spawn Blue Knight\r\n            if (levelData.blueKnight === false) {\r\n                monster = bosses[3];\r\n                levelData.blueKnight = 'alive';\r\n            }\r\n            // Spawn Yellow Knight\r\n            else if (levelData.yellowKnight === false) {\r\n                monster = bosses[4];\r\n                levelData.yellowKnight = 'alive';\r\n            }\r\n        }\r\n        addEnemy(row,col,monster);\r\n    }\r\n    else if (options.tutorial && options.newgame) {\r\n        monster = bestiary[1];\r\n        addEnemy(3,1,monster);\r\n    }\r\n    else {\r\n        if (monster.weight + totalWeight <= maxWeight) {\r\n            addEnemy(row,col,monster);\r\n        }\r\n        else if (maxWeight - totalWeight <= 20) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Flash the warning icon when an enemy is spawning\r\nfunction enemyWarning() {\r\n    var warning = document.getElementById('warning');\r\n        warning.src = 'img/gui/warning.svg';\r\n        warning.style.animation = 'warning 2.5s 1';\r\n        setTimeout(function() {\r\n            warning.style.animation = '';\r\n        }, 2500);\r\n}\r\n\r\n\r\n// Spawn an enemy and apply some data to it\r\nfunction addEnemy(row,col,monster) {\r\n    enemyWarning();\r\n    numberOfEnemies++;\r\n    var enemy = (JSON.parse(JSON.stringify(monster)));\r\n    totalWeight += enemy.weight;\r\n\r\n    enemy.armorRating = 1;\r\n    enemy.attackRating = 1;\r\n    enemy.canMove = true;\r\n    enemy.col = col;\r\n    enemy.cooldown = false;\r\n    enemy.enemy = true;\r\n    enemy.gameLevel = hero.gameLevel;\r\n    enemy.id = 'enemy-container' + numberOfEnemies;\r\n    enemy.invisible = false;\r\n    enemy.left = (col * cellSize) - cellSize;\r\n    enemy.location = 'r' + row + 'c' + col;\r\n    enemy.row = row;\r\n    enemy.startingHealth = monster.health;\r\n    enemy.top = (row * cellSize) - cellSize;\r\n    \r\n    // Check if monster has been encountered before\r\n    if (options.enemiesEncountered.indexOf(enemy.type) == -1) {\r\n        options.enemiesEncountered.unshift(enemy.type);\r\n        options.newEnemies++;\r\n        localStorage.setItem('options', JSON.stringify(options));\r\n    }\r\n    if (enemies !== null) {\r\n        enemies.push(enemy);\r\n    }\r\n    else {\r\n        resetAll();\r\n        return;\r\n    }\r\n    // Create DOM element for enemy\r\n    var createEnemy = document.createElement('div');\r\n    if (enemy.boss) {\r\n        // Apply boss scaling\r\n        // If second boss fight\r\n        if (hero.bosses.length === 2) {\r\n            enemy.startingHealth *= 1.5;\r\n            enemy.health *= 1.5;\r\n            enemy.attackRating += 0.5;\r\n        }\r\n        // If third boss fight\r\n        if (hero.bosses.length === 1) {\r\n            enemy.startingHealth *= 2;\r\n            enemy.health *= 2;\r\n            enemy.attackRating += 1;\r\n        }\r\n        enemy.startingHealth *= hero.difficultyMonster;\r\n        enemy.health *= hero.difficultyMonster;\r\n        createEnemy.classList.add('boss');\r\n        var healthBar = document.createElement('span');\r\n            healthBar.id = 'boss-health';\r\n        if (enemy.type === 'Red Knight') {\r\n            healthBar.id = 'boss-health-redknight';\r\n        }\r\n        else if (enemy.type === 'Blue Knight') {\r\n            healthBar.id = 'boss-health-blueknight';\r\n        }\r\n        else if (enemy.type === 'Yellow Knight') {\r\n            healthBar.id = 'boss-health-yellowknight';\r\n        }\r\n            healthBar.style.width = '100%';\r\n            healthBar.style.opacity = '0';\r\n            createEnemy.appendChild(healthBar);\r\n    }\r\n    else {\r\n        createEnemy.classList.add('enemy');\r\n    }\r\n    // Allow aggressive types to fly over objects\r\n    if (enemy.moveType === 'aggressive') {\r\n        createEnemy.classList.add('flying');\r\n    }\r\n        createEnemy.id = enemy.id;\r\n        createEnemy.style.width = cellSize + 'px';\r\n        createEnemy.style.height = cellSize + 'px';\r\n        createEnemy.style.backgroundImage = 'url(\"img/enemies/shadow.png\")';\r\n        createEnemy.style.top = '0';\r\n        createEnemy.style.left = '0';\r\n        createEnemy.style.zIndex = 10;\r\n        createEnemy.style.transitionDuration = '0';\r\n    var message = document.createElement('span');\r\n        message.className = 'message';\r\n        message.innerHTML = '';\r\n        createEnemy.appendChild(message);\r\n    var enemyImage = document.createElement('img');\r\n        enemyImage.src = 'img/enemies/' + enemy.image;\r\n        createEnemy.appendChild(enemyImage);\r\n        levelContainer.appendChild(createEnemy);\r\n    var enemyContainer = document.getElementById(enemy.id);\r\n        enemyContainer.style.transition = enemy.moveSpeed + 's ease';\r\n    // Insert the enemy onto one of the outside squares\r\n    if (enemy.row === 1) {\r\n        enemyContainer.style.transform = 'translate(' + enemy.left + 'px, ' + '-' + cellSize + 'px)';\r\n    }\r\n    else if (enemy.row === numberOfRows) {\r\n        enemyContainer.style.transform = 'translate(' + enemy.left + 'px, ' + (enemy.top + cellSize) + 'px)';\r\n    }\r\n    else if (enemy.row !== 1 || enemy.row !== numberOfRows) {\r\n        if (enemy.col === 1) {\r\n            enemyContainer.style.transform = 'translate(-' + cellSize + 'px, ' + enemy.top + 'px)';\r\n        }\r\n        else if (enemy.col === numberOfColumns) {\r\n            enemyContainer.style.transform = 'translate(' + (enemy.left + cellSize) + 'px, ' + enemy.top + 'px)';\r\n        }\r\n    }\r\n\r\n    // Move enemy in from outside of map\r\n    setTimeout(function() {\r\n        enemyContainer.style.transform = 'translate(' + enemy.left + 'px, ' + enemy.top + 'px)';\r\n        // Add to map data\r\n        if (map !== null) {\r\n            map[enemy.row - 1][enemy.col - 1].enemy.push(enemy.id);\r\n        }\r\n        actionInterval();\r\n    }, 2000);\r\n\r\n    // Perform actions at set intervals depending on monster moveInterval\r\n    function actionInterval() {\r\n        var actionInterval = setInterval(function() {\r\n            // Increase monster damage when playing with a keyboard\r\n            if (keyboardPlayer && !enemy.boss) {\r\n                enemy.attackRating = keyboardDamageModifier;\r\n            }\r\nconsole.log(enemy.attackRating);\r\n            // Destroy any stowaways trying to sneak into the next level\r\n            if (enemy.gameLevel !== hero.gameLevel) {\r\n                clearTimeout(actionInterval);\r\n                enemy = null;\r\n                delete enemy;\r\n            }\r\n            else if (map === null || hero === null) {\r\n                clearTimeout(actionInterval);\r\n                enemy = null;\r\n                delete enemy;\r\n            }\r\n            else if (hero.bossHasSpawned && hero.bossIsDead && enemy.health > 0) {\r\n                enemy.evasion = 0;\r\n                enemy.health = 1;\r\n                checkForAttack('none',enemy,hero);\r\n            }\r\n            else {\r\n                // Award XP on death, then destroy\r\n                if (enemy.health <= 0) {\r\n                    if (enemy.boss) {\r\n                        if (enemy.type === 'Red Knight') {\r\n                            levelData.redKnight = 'dead';\r\n                        }\r\n                        else if (enemy.type === 'Blue Knight') {\r\n                            levelData.blueKnight = 'dead';\r\n                        }\r\n                        else if (enemy.type === 'Yellow Knight') {\r\n                            levelData.yellowKnight = 'dead';\r\n                        }\r\n                        if (levelData.redKnight === 'dead' && levelData.blueKnight === 'dead' && levelData.yellowKnight === 'dead') {\r\n                            hero.bossIsDead = true;\r\n                            var index = hero.bosses.indexOf('Red Knight');\r\n                            hero.bosses.splice(index,1);\r\n                        }\r\n                        else if (enemy.type !== 'Red Knight' && enemy.type !== 'Blue Knight' && enemy.type !== 'Yellow Knight') {\r\n                            hero.bossIsDead = true;\r\n                            var index = hero.bosses.indexOf(enemy.type);\r\n                            hero.bosses.splice(index,1);\r\n                        }\r\n\r\n                        if (hero.bossIsDead) {\r\n                            setTimeout(function() {\r\n                                for (var i = 0; i < columnArray.length; i++) {\r\n                                    var cage = document.getElementById(columnArray[i].location).lastChild;\r\n                                        cage.style.opacity = '0';\r\n                                    var cell = columnArray[i];\r\n                                        map[cell.row - 1][cell.col - 1].contents = 'empty';\r\n                                }\r\n                                textBubble('rescue',1000);\r\n                                if (hero.answers === hero.answersNeeded) {\r\n                                    openExitCover();\r\n                                }\r\n                            }, 2000);\r\n                        }\r\n                    }\r\n                    clearTimeout(actionInterval);\r\n                    awardXp(enemy);\r\n                    totalWeight -= enemy.weight;\r\n                    hero.enemiesSlain++;\r\n                    enemy = null;\r\n                    delete enemy;\r\n                    delete enemyContainer;\r\n                }\r\n                // If options menu open, pause movement\r\n                else if (hero.pause === true) {\r\n                }\r\n                // Roll chance to use special ability, then perform an action\r\n                else if (enemy.health >= 0) {\r\n                    if (enemy.abilities) {\r\n                        var useAbility = randomNumber(1,100);\r\n                        enemy.currentAbility = enemy.abilities[randomNumber(0,enemy.abilities.length - 1)];\r\n                        if (useAbility <= enemy.currentAbility.abilityChance) {\r\n                            if (enemy.currentAbility.ability === 'acid' || enemy.currentAbility.ability === 'web' || enemy.currentAbility.ability === 'poison' || enemy.currentAbility.ability === 'ice') {\r\n                                layTrap(enemy);\r\n                            }\r\n                            else if (enemy.currentAbility.ability === 'rotate') {\r\n                                rotateEquation(enemy);\r\n                            }\r\n                            else if (enemy.currentAbility.ability === 'projectile') {\r\n                                enemyProjectile(enemy,enemyContainer);\r\n                            }\r\n                            else if (enemy.currentAbility.ability === 'burst' && enemy.currentAbility.shots === 0) {\r\n                                var interval = setInterval(function() {\r\n                                    if (enemy.cooldown) {\r\n                                        clearInterval(interval);\r\n                                    }\r\n                                    else if (enemy.currentAbility.shots >= 3) {\r\n                                        enemy.currentAbility.shots = 0;\r\n                                        clearInterval(interval);\r\n                                        cooldown(enemy,enemy.moveInterval);\r\n                                    }\r\n                                    else if (enemy.cooldown === false) {\r\n                                        enemyProjectile(enemy,enemyContainer);\r\n                                        enemy.currentAbility.shots++;\r\n                                    }\r\n                                }, enemy.currentAbility.burstSpeed);\r\n                            }\r\n                            else if (enemy.currentAbility.ability === 'invisibility' && enemy.invisible === false) {\r\n                                turnInvisible(enemy,enemyContainer);\r\n                            }\r\n                        }\r\n                        getMovementDirection(enemy,enemyContainer);\r\n                    }\r\n                    else {\r\n                        getMovementDirection(enemy,enemyContainer);\r\n                    }\r\n                }\r\n                else {\r\n                    clearTimeout(interval);\r\n                    totalWeight = 0;\r\n                    enemy = null;\r\n                    delete enemy;\r\n                    delete enemyContainer;\r\n                }\r\n            }\r\n        }, enemy.moveInterval);\r\n    }\r\n}","/////////////// ENEMY_ABILITIES ///////////////\r\n\r\n// Add damage over time effect\r\nfunction damageOverTime(victim,attacker) {\r\n    var amount = attacker.currentAbility.abilityDamge;\r\n    // Display status ailment\r\n    flashMessage(victim,attacker.currentAbility.dotStatus,attacker.currentAbility.damageDuration);\r\n    // Deal damage over time at set interval\r\n    var interval = setInterval(function() {\r\n        if (victim.health <= 0) {\r\n            clearInterval(interval);\r\n        }\r\n        else  {\r\n            dealDamage(amount,attacker);\r\n        }\r\n    }, 250);\r\n    setTimeout(function() {\r\n        clearInterval(interval);\r\n    }, attacker.currentAbility.damageDuration);\r\n}\r\n\r\n\r\n// Allow vampires to temporarily turn mostly invisible\r\nfunction turnInvisible(enemy,enemyContainer) {\r\n    var damage = enemy.currentAbility.abilityDamge;\r\n    enemy.invisible = true;\r\n    enemy.evasion = 50;\r\n    enemyContainer.lastChild.style.opacity = '0';\r\n    // Drain health if invisible and within range\r\n    var interval = setInterval(function() {\r\n        if (enemy.health <= 0) {\r\n            clearInterval(interval);\r\n        }\r\n        else if (enemy.invisible) {\r\n            if (Math.abs(hero.row - enemy.row) <= 1 && Math.abs(hero.col - enemy.col) <= 1) {\r\n                dealDamage(damage,enemy);\r\n            }\r\n        }\r\n        else {\r\n            clearInterval(interval);\r\n        }\r\n    }, 250);\r\n    setTimeout(function() {\r\n        enemy.invisible = false;\r\n        enemy.evasion = 0;\r\n        enemyContainer.lastChild.style.opacity = '1';\r\n    }, enemy.currentAbility.abilityDuration);\r\n}\r\n\r\n\r\n// Allow enemies to shoot stuff at you\r\nfunction enemyProjectile(enemy,enemyContainer) {\r\n    // If enemy shoots projectiles, chance to attack if on same row or column\r\n    if (randomNumber(1,100) < enemy.currentAbility.targetChance) {\r\n        // If player is on same row and to the RIGHT\r\n        if (enemy.row === hero.row && enemy.col < hero.col) {\r\n            var direction = 'right';\r\n        }\r\n        // If player is on same row and to the LEFT\r\n        else if (enemy.row === hero.row && enemy.col > hero.col) {\r\n            var direction = 'left';\r\n        }\r\n        // If player is on same column and UP\r\n        else if (enemy.col === hero.col && enemy.row > hero.row) {\r\n            var direction = 'up';\r\n        }\r\n        // If player is on same column and UP\r\n        else if (enemy.col === hero.col && enemy.row < hero.row) {\r\n            var direction = 'down';\r\n        }\r\n    }\r\n    // Otherwide fire in a random direction\r\n    else {\r\n        var directions = ['up','down','left','right'];\r\n        var direction = directions[randomNumber(0,3)];\r\n    }\r\n\r\n    // Create the projectile element\r\n    var spawn = enemyContainer.getBoundingClientRect();\r\n    var object = document.createElement('img');\r\n    var type = enemy.currentAbility.abilityImage[randomNumber(0,enemy.currentAbility.abilityImage.length - 1)];\r\n        object.src = 'img/enemies/' + type;\r\n        object.id = 'projectile' + randomNumber(1,1000);\r\n        object.classList.add('projectile');\r\n        object.style.width = cellSize + 'px';\r\n        object.style.height = cellSize + 'px';\r\n        object.style.top = enemy.top + 'px';\r\n        object.style.left = enemy.left + 'px';\r\n        // Rotate it to match the direction it is being fired in\r\n        if (direction === 'down') { object.style.transform = 'rotate(180deg)'; }\r\n        else if (direction === 'left') { object.style.transform = 'rotate(-90deg)'; }\r\n        else if (direction === 'right') { object.style.transform = 'rotate(90deg)'; }\r\n        levelContainer.appendChild(object);\r\n    var projectile = document.getElementById(object.id);\r\n\r\n    if (direction === 'up') {\r\n        var distance = levelContainer.clientHeight + cellSize;\r\n        var speed = numberOfRows * enemy.currentAbility.abilityDuration;\r\n            projectile.style.transition = speed + 's linear';\r\n            projectile.style.transform = 'translateY(-' + distance + 'px)';\r\n    }\r\n    else if (direction === 'down') {\r\n        var distance = levelContainer.clientHeight + cellSize;\r\n        var speed = numberOfRows * enemy.currentAbility.abilityDuration;\r\n            projectile.style.transition = speed + 's linear';\r\n            projectile.style.transform = 'translateY(' + distance + 'px) rotate(180deg)';\r\n    }\r\n    else if (direction === 'left') {\r\n        var distance = levelContainer.clientWidth + cellSize;\r\n        var speed = numberOfColumns * enemy.currentAbility.abilityDuration;\r\n            projectile.style.transition = speed + 's linear';\r\n            projectile.style.transform = 'translateX(-' + distance + 'px) rotate(-90deg)';\r\n    }\r\n    else if (direction === 'right') {\r\n        var distance = levelContainer.clientWidth + cellSize;\r\n        var speed = numberOfColumns * enemy.currentAbility.abilityDuration;\r\n            projectile.style.transition = speed + 's linear';\r\n            projectile.style.transform = 'translateX(' + distance + 'px) rotate(90deg)';\r\n    }\r\n    var canHit = true;\r\n    // Check for collisions\r\n    var interval = setInterval(function() {\r\n        var projectilePos = projectile.getBoundingClientRect();\r\n        var playerPos = player.getBoundingClientRect();\r\n        if (Math.abs(projectilePos.top - playerPos.top) <= (cellSize * 0.85) &&\r\n            Math.abs(projectilePos.left - playerPos.left) <= (cellSize * 0.85) &&\r\n            canHit) {\r\n            if (randomNumber(1,100) > hero.evasion) {\r\n                // Check for projectile type\r\n                type = type.split('-').pop().split('.').shift();\r\n                if (type === 'ice') {\r\n                    freezePerson(hero,enemy.currentAbility.damageDuration,'ice');\r\n                    clearInterval(interval);\r\n                    projectile.style.display = 'none';\r\n                }\r\n                else if (type === 'poison') {\r\n                    hero.timesPoisoned++;\r\n                    damageOverTime(hero,enemy);\r\n                    clearInterval(interval);\r\n                    projectile.style.display = 'none';\r\n                }\r\n                else {\r\n                    flashHitImage(hero,player);\r\n                    dealDamage(enemy.currentAbility.abilityDamge,enemy);\r\n                    clearInterval(interval);\r\n                    projectile.style.display = 'none';\r\n                }\r\n            }\r\n            // Make player immune to damage until projectile leaves the current cell\r\n            else {\r\n                canHit = false;\r\n                flashMessage(hero,'evaded!');\r\n                hero.attacksEvaded++;\r\n                var safeTime = enemy.currentAbility.abilityDuration * 1250;\r\n                setTimeout(function() {\r\n                    canHit = true;\r\n                }, safeTime);\r\n            }\r\n        }\r\n        // Check if there is a column collision\r\n        for (var i = 0; i < columnPositions.length; i++) {\r\n            if (Math.abs(projectilePos.top - columnPositions[i].top) <= (cellSize * 0.85) &&\r\n            Math.abs(projectilePos.left - columnPositions[i].left) <= (cellSize * 0.85) &&\r\n            canHit) {\r\n                clearInterval(interval);\r\n                projectile.style.display = 'none';\r\n            }\r\n        }\r\n    }, 250);\r\n    // Wait until the projectile is off screen, then remove it\r\n    setTimeout(function() {\r\n        clearInterval(interval);\r\n        projectile.remove();\r\n    }, speed * 1000);\r\n}\r\n\r\n\r\n// Allow enemies to rotate the equations\r\nfunction rotateEquation(enemy) {\r\n    var location = map[enemy.row - 1][enemy.col - 1];\r\n    if (location.hasOwnProperty('answer') && location.answer !== 'captured') {\r\n        var cell = document.querySelector('#' + enemy.location + ' p');\r\n            cell.style.transition = '1s';\r\n            cell.style.transform = 'rotate(180deg)';\r\n            cell.style.color = '#E22727';\r\n        setTimeout(function() {\r\n            cell.style.transform = 'rotate(0deg)';\r\n            cell.style.color = '#fff';\r\n        }, enemy.currentAbility.abilityDuration);\r\n    }\r\n}\r\n\r\n\r\n// Allow enemies to lay temporary traps\r\nfunction layTrap(enemy) {\r\n    var mapLocation = map[enemy.row - 1][enemy.col - 1];\r\n    var cell = document.getElementById(enemy.location);\r\n    if (mapLocation.contents === 'trap') {\r\n\r\n    }\r\n    else if (mapLocation.contents !== 'trap') {\r\n        var original = mapLocation.contents;\r\n        var originalDmg = mapLocation.trapDamage;\r\n            mapLocation.contents = 'trap';\r\n            mapLocation.trapType = enemy.currentAbility.ability;\r\n            mapLocation.trapDamage = enemy.currentAbility.abilityDamge;\r\n        if (enemy.currentAbility.ability === 'ice' || enemy.currentAbility.ability === 'web') {\r\n            mapLocation.trapDuration = enemy.currentAbility.trapDuration;\r\n        }\r\n        var trap = document.createElement('img');\r\n            trap.src = 'img/objects/' + enemy.currentAbility.ability + '-' + randomNumber(1,2) + '.gif';\r\n            trap.opacity = '0';\r\n            trap.style.animation = 'img-fade-in 1s 1';\r\n            cell.appendChild(trap);\r\n\r\n        setTimeout(function() {\r\n            trap.style.animation = 'img-fade-out 1s 1 forwards';\r\n            mapLocation.contents = original;\r\n            mapLocation.trapType = '';\r\n            mapLocation.trapDamage = originalDmg;\r\n            setTimeout(function() {\r\n                trap.style.display = 'none';\r\n                cell.removeChild(trap);\r\n            }, 1000);\r\n        }, enemy.currentAbility.abilityDuration);\r\n    }\r\n}","/////////////// MOVEMENT_ENEMY ///////////////\r\n\r\n// Determine which direction to move in\r\nfunction getMovementDirection(enemy,enemyContainer) {\r\n    var directions = ['up','down','left','right'];\r\n    var hasAttacked = false;\r\n    // Passive enemies have a lower chance to target you\r\n    if (enemy.moveType === 'passive') {\r\n        var chanceToAttack = 40;\r\n    }\r\n    // Aggressive enemies are more likely to attack\r\n    else {\r\n        var chanceToAttack = 80;\r\n    }\r\n\r\n    // If on top row, do not move up\r\n    if (enemy.row === 1) {\r\n        var index = directions.indexOf('up');\r\n            directions.splice(index, 1);\r\n    }\r\n    else {\r\n        var mapLocation = map[enemy.row - 2][enemy.col - 1];\r\n        // If the player is above them, roll for attack chance\r\n        if (mapLocation.hero && randomNumber(1,100) <= chanceToAttack) {\r\n            checkForAttack('up',hero,enemy);\r\n            hasAttacked = true;\r\n        }\r\n        // If location is blocked or contains an enemy\r\n        else {\r\n            if (mapLocation.contents === 'blocked' || mapLocation.enemy.length > 0 || mapLocation.hero)  {\r\n                var index = directions.indexOf('up');\r\n                    directions.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // If on bottom row, do not move down\r\n    if (enemy.row === numberOfRows) {\r\n        var index = directions.indexOf('down');\r\n            directions.splice(index, 1);\r\n    }\r\n    else {\r\n        var mapLocation = map[enemy.row][enemy.col - 1];\r\n        // If the player is below them, roll for attack chance\r\n        if (mapLocation.hero && randomNumber(1,100) <= chanceToAttack) {\r\n            checkForAttack('down',hero,enemy);\r\n            hasAttacked = true;\r\n        }\r\n        // If location is blocked or contains an enemy\r\n        else {\r\n            if (mapLocation.contents === 'blocked' || mapLocation.enemy.length > 0 || mapLocation.hero)  {\r\n                var index = directions.indexOf('down');\r\n                    directions.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // If on left most column, do not move left\r\n    if (enemy.col === 1) {\r\n        var index = directions.indexOf('left');\r\n            directions.splice(index, 1);\r\n    }\r\n    else {\r\n        var mapLocation = map[enemy.row - 1][enemy.col - 2];\r\n        // If the player is left of them, roll for attack chance\r\n        if (mapLocation.hero && randomNumber(1,100) <= chanceToAttack) {\r\n            checkForAttack('left',hero,enemy);\r\n            hasAttacked = true;\r\n        }\r\n        // If location is blocked or contains an enemy\r\n        else {\r\n            if (mapLocation.contents === 'blocked' || mapLocation.enemy.length > 0 || mapLocation.hero)  {\r\n                var index = directions.indexOf('left');\r\n                    directions.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // If on right most column, do not move right\r\n    if (enemy.col === numberOfColumns) {\r\n        var index = directions.indexOf('right');\r\n            directions.splice(index, 1);\r\n    }\r\n    else {\r\n        var mapLocation = map[enemy.row - 1][enemy.col];\r\n        // If the player is right of them, roll for attack chance\r\n        if (mapLocation.hero && randomNumber(1,100) <= chanceToAttack) {\r\n            checkForAttack('right',hero,enemy);\r\n            hasAttacked = true;\r\n        }\r\n        // If location is blocked or contains an enemy\r\n        else {\r\n            if (mapLocation.contents === 'blocked' || mapLocation.enemy.length > 0 || mapLocation.hero)  {\r\n                var index = directions.indexOf('right');\r\n                    directions.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (enemy.moveType === 'passive' && hasAttacked === false) {\r\n        moveEnemy(enemy,enemyContainer,directions);\r\n    }\r\n    else if (enemy.moveType === 'aggressive' && hasAttacked === false) {\r\n        getAggressiveMovement(enemy,enemyContainer);\r\n    }\r\n}\r\n\r\n\r\n// Calculate how to hunt the player down\r\nfunction getAggressiveMovement(enemy,enemyContainer) {\r\n    // If on top of the hero\r\n    if (enemy.row === hero.row && enemy.col === hero.col) {\r\n    }\r\n    // If on the same row\r\n    else if (enemy.row === hero.row) {\r\n        // Try to move right\r\n        if (enemy.col !== numberOfColumns) {\r\n            var mapLocation = map[enemy.row - 1][enemy.col];\r\n            if (enemy.col < hero.col && mapLocation.hero === false) {\r\n                var move = ['right'];\r\n            }\r\n        }\r\n        // Try to move left\r\n        if (enemy.col !== 1) {\r\n            var mapLocation = map[enemy.row - 1][enemy.col - 2];\r\n            if (enemy.col > hero.col && mapLocation.hero === false) {\r\n                var move = ['left'];\r\n            }\r\n        }\r\n    }\r\n    // If on the same column\r\n    else if (enemy.col === hero.col) {\r\n        // Try to move down\r\n        if (enemy.row !== numberOfRows) {\r\n            var mapLocation = map[enemy.row][enemy.col - 1];\r\n            if (enemy.row < hero.row && mapLocation.hero === false) {\r\n                var move = ['down'];\r\n            }\r\n        }\r\n        // Try to move up\r\n        if (enemy.row !== 1) {\r\n            var mapLocation = map[enemy.row - 2][enemy.col - 1];\r\n            if (enemy.row > hero.row && mapLocation.hero === false) {\r\n                var move = ['up'];\r\n            }\r\n        }\r\n    }\r\n    else if (Math.abs(enemy.row - hero.row) < Math.abs(enemy.col - hero.col)) {\r\n        // Try to move to the same column\r\n        // Try to move right\r\n        if (enemy.col !== numberOfColumns) {\r\n            var mapLocation = map[enemy.row - 1][enemy.col];\r\n            if (enemy.col < hero.col && mapLocation.hero === false) {\r\n                var move = ['right'];\r\n            }\r\n        }\r\n        // Try to move left\r\n        if (enemy.col !== 1) {\r\n            var mapLocation = map[enemy.row - 1][enemy.col - 2];\r\n            if (enemy.col > hero.col && mapLocation.hero === false) {\r\n                var move = ['left'];\r\n            }\r\n        }\r\n    }\r\n    // Column position is closer\r\n    else {\r\n        // Try to move to the same row\r\n        // Try to move down\r\n        if (enemy.row !== numberOfRows) {\r\n            var mapLocation = map[enemy.row][enemy.col - 1];\r\n            if (enemy.row < hero.row && mapLocation.hero === false) {\r\n                var move = ['down'];\r\n            }\r\n        }\r\n        // Try to move up\r\n        if (enemy.row !== 1) {\r\n            var mapLocation = map[enemy.row - 2][enemy.col - 1];\r\n            if (enemy.row > hero.row && mapLocation.hero === false) {\r\n                var move = ['up'];\r\n            }\r\n        }\r\n    }\r\n    moveEnemy(enemy,enemyContainer,move);\r\n}\r\n\r\n\r\n// Move enemy based on passive or aggressive AI\r\nfunction moveEnemy(enemy,enemyContainer,directions) {\r\n    if (directions === undefined) {\r\n        var move = 'none';\r\n    }\r\n    else {\r\n        var move = directions[randomNumber(0,directions.length - 1)];\r\n    }\r\n\r\n    // MOVE UP\r\n    if (move === 'up') {\r\n        map[enemy.row - 1][enemy.col - 1].enemy.splice(0,1);\r\n        enemy.top -= cellSize;\r\n        enemyContainer.style.transform = 'translate(' + enemy.left + 'px, ' + enemy.top + 'px)';\r\n        enemy.row--;\r\n        map[enemy.row - 1][enemy.col - 1].enemy.push(enemy.id);\r\n    }\r\n\r\n    // MOVE DOWN\r\n    else if (move === 'down') {\r\n        map[enemy.row - 1][enemy.col - 1].enemy.splice(0,1);\r\n        enemy.top += cellSize;\r\n        enemyContainer.style.transform = 'translate(' + enemy.left + 'px, ' + enemy.top + 'px)';\r\n        enemy.row++;\r\n        map[enemy.row - 1][enemy.col - 1].enemy.push(enemy.id);\r\n    }\r\n\r\n    // MOVE LEFT\r\n    else if (move === 'left') {\r\n        map[enemy.row - 1][enemy.col - 1].enemy.splice(0,1);\r\n        enemy.left -= cellSize;\r\n        enemyContainer.style.transform = 'translate(' + enemy.left + 'px, ' + enemy.top + 'px)';\r\n        enemy.col--;\r\n        map[enemy.row - 1][enemy.col - 1].enemy.push(enemy.id);\r\n    }\r\n\r\n    // MOVE RIGHT\r\n    else if (move === 'right') {\r\n        map[enemy.row - 1][enemy.col - 1].enemy.splice(0,1);\r\n        enemy.left += cellSize;\r\n        enemyContainer.style.transform = 'translate(' + enemy.left + 'px, ' + enemy.top + 'px)';\r\n        enemy.col++;\r\n        map[enemy.row - 1][enemy.col - 1].enemy.push(enemy.id);\r\n    }\r\n    enemy.location = 'r' + enemy.row + 'c' + enemy.col;\r\n}","/////////////// MOVEMENT_PLAYER ///////////////\r\n\r\n// Add event listeners for the 4 movement buttons\r\nvar moveUp = document.getElementById('move-up');\r\n    moveUp.addEventListener('click', function(e) {\r\n        if (hero.fastTravel) {\r\n            hero.fastTravel = false;\r\n        }\r\n        else {\r\n            moveHero('move-up');\r\n        }\r\n    });\r\nvar moveDown = document.getElementById('move-down');\r\n    moveDown.addEventListener('click', function(e) {\r\n        if (hero.fastTravel) {\r\n            hero.fastTravel = false;\r\n        }\r\n        else {\r\n            moveHero('move-down');\r\n        }\r\n    });\r\nvar moveLeft = document.getElementById('move-left');\r\n    moveLeft.addEventListener('click', function(e) {\r\n        if (hero.fastTravel) {\r\n            hero.fastTravel = false;\r\n        }\r\n        else {\r\n            moveHero('move-left');\r\n        }\r\n    });\r\nvar moveRight = document.getElementById('move-right');\r\n    moveRight.addEventListener('click', function(e) {\r\n        if (hero.fastTravel) {\r\n            hero.fastTravel = false;\r\n        }\r\n        else {\r\n            moveHero('move-right');\r\n        }\r\n    });\r\n\r\n// Listen for keyboard events for desktop users that like to kick it oldschool\r\ndocument.onkeyup = checkKey;\r\n\r\nfunction checkKey(e) {\r\n    if (hero.canMove) {\r\n        e = e || window.event;\r\n        var move = false;\r\n        // Assign movement direction\r\n        if (e.keyCode == '37') {\r\n            move = 'move-left';\r\n        }\r\n        else if (e.keyCode == '38') {\r\n            move = 'move-up';\r\n        }\r\n        else if (e.keyCode == '39') {\r\n            move = 'move-right';\r\n        }\r\n        else if (e.keyCode == '40') {\r\n            move = 'move-down';\r\n        }\r\n        else if (e.keyCode == '32') {\r\n            hero.fastTravel = false;\r\n            checkMath();\r\n        }\r\n        if (e.keyCode == '37' || e.keyCode == '38' || e.keyCode == '39' || e.keyCode == '40') {\r\n            keyboardPlayer = true;\r\n        }\r\n        // Pass movement direction to movement function\r\n        if (move !== false) {\r\n            hero.fastTravel = false;\r\n            moveHero(move);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Allow player to automate travel for greater distances\r\nfunction fastTravel(e) {\r\n    if (hero.fastTravel) {\r\n        hero.fastTravel = false;\r\n    }\r\n    else {\r\n        var mapCell;\r\n        for (var r = 0; r < numberOfRows; r++) {\r\n            for (var c = 0; c < numberOfColumns; c++) {\r\n                if (map[r][c].location === e.target.id && map[r][c].contents !== 'blocked') {\r\n                    mapCell = map[r][c];\r\n                    hero.fastTravel = mapCell;\r\n                    var square = document.createElement('span');\r\n                        square.classList.add('highlight');\r\n                    document.getElementById(mapCell.location).appendChild(square);\r\n                        square.style.borderColor = 'rgba(12,126,180,1)';\r\n                    if (hero.fastTravel !== false && hero.canMove !== false) {\r\n                        var end = hero.fastTravel;\r\n                        fastTravelPathing(square);\r\n                    }\r\n                    var interval = setInterval(function() {\r\n                        if (hero.fastTravel !== false && hero.canMove !== false) {\r\n                            var end = hero.fastTravel;\r\n                            fastTravelPathing(square);\r\n                        }\r\n                        else {\r\n                            clearInterval(interval);\r\n                            square.style.borderColor = 'rgba(0,0,0,0)';\r\n                            setTimeout(function() {\r\n                                square.remove();\r\n                            }, 500);\r\n                        }\r\n                    }, 500);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Automate travelling from one location to another with some basic obstacle avoidance\r\nfunction fastTravelPathing(square) {\r\n    var end = hero.fastTravel;\r\n    // Determine greatest distance to close\r\n    var rows = Math.abs(hero.row - end.row);\r\n    var cols = Math.abs(hero.col - end.col);\r\n    if (rows > cols) {\r\n        var direction = 'vertical';\r\n    }\r\n    else {\r\n        var direction = 'horizontal';\r\n    }\r\n    // Fade out outline if 1 square away from target\r\n    if (Math.abs(hero.row - end.row) <= 1 && Math.abs(hero.col - end.col) <= 1) {\r\n        setTimeout(function() {\r\n            square.style.borderColor = 'rgba(0,0,0,0)';\r\n        }, 350);\r\n    }\r\n    // Stop moving if the end has been reached\r\n    if (hero.location === end.location) {\r\n        hero.fastTravel = false;\r\n    }\r\n    // If on the same row\r\n    else if (hero.row === end.row) {\r\n        // If location is left\r\n        if (hero.col > end.col) {\r\n            // If next cell is clear\r\n            if (map[hero.row - 1][hero.col - 2].contents !== 'blocked' && map[hero.row - 1][hero.col - 2].enemy.length === 0) {\r\n                moveHero('move-left');\r\n            }\r\n            // If blocked\r\n            else {\r\n                // If not on bottom row, move down\r\n                if (hero.row !== numberOfRows && map[hero.row][hero.col - 1].contents !== 'blocked' && map[hero.row][hero.col - 1].enemy.length === 0) {\r\n                    // Keep from geting stuck in a loop\r\n                    if (hero.lastLocation.lastMove === 'move-down') {\r\n                        moveHero('move-down');\r\n                    }\r\n                    else {\r\n                        moveHero('move-up');\r\n                    }\r\n                }\r\n                // Otherwise, move up\r\n                else if (hero.row === numberOfRows && map[hero.row - 2][hero.col - 1].contents !== 'blocked' && map[hero.row - 2][hero.col - 1].enemy.length === 0) {\r\n                    // Keep from geting stuck in a loop\r\n                    if (hero.lastLocation.lastMove === 'move-up') {\r\n                        moveHero('move-up');\r\n                    }\r\n                    else {\r\n                        moveHero('move-down');\r\n                    }\r\n                }\r\n                else {\r\n                    hero.fastTravel = false;\r\n                }\r\n            }\r\n        }\r\n        // If location is right\r\n        else if (hero.col < end.col) {\r\n            // If next cell is clear\r\n            if (map[hero.row - 1][hero.col].contents !== 'blocked' && map[hero.row - 1][hero.col].enemy.length === 0) {\r\n                moveHero('move-right');\r\n            }\r\n            // If blocked\r\n            else {\r\n                // If not on bottom row, move down\r\n                if (hero.row !== numberOfRows && map[hero.row][hero.col - 1].contents !== 'blocked' && map[hero.row][hero.col - 1].enemy.length === 0) {\r\n                    // Keep from geting stuck in a loop\r\n                    if (hero.lastLocation.lastMove === 'move-down') {\r\n                        moveHero('move-down');\r\n                    }\r\n                    else {\r\n                        moveHero('move-up');\r\n                    }\r\n                }\r\n                // Otherwise, move up\r\n                else if (hero.row === numberOfRows && map[hero.row - 2][hero.col - 1].contents !== 'blocked' && map[hero.row - 1][hero.col - 2].enemy.length === 0) {\r\n                    // Keep from geting stuck in a loop\r\n                    if (hero.lastLocation.lastMove === 'move-up') {\r\n                        moveHero('move-up');\r\n                    }\r\n                    else {\r\n                        moveHero('move-down');\r\n                    }\r\n                }\r\n                else {\r\n                    hero.fastTravel = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // If target location is up\r\n    else if (hero.row > end.row && direction === 'vertical') {\r\n        // If next cell is clear\r\n        if (map[hero.row - 2][hero.col - 1].contents !== 'blocked' && map[hero.row - 2][hero.col - 1].enemy.length === 0) {\r\n            moveHero('move-up');\r\n        }\r\n        // If blocked\r\n        else {\r\n            // If not on right most column, move right\r\n            if (hero.col !== numberOfColumns && map[hero.row - 1][hero.col].contents !== 'blocked' && map[hero.row - 1][hero.col].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-right') {\r\n                    moveHero('move-right');\r\n                }\r\n                else {\r\n                    moveHero('move-left');\r\n                }\r\n            }\r\n            // Otherwise, move left\r\n            else if (hero.col === numberOfColumns && map[hero.row - 1][hero.col - 2].contents !== 'blocked' && map[hero.row - 1][hero.col - 2].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-left') {\r\n                    moveHero('move-left');\r\n                }\r\n                else {\r\n                    moveHero('move-right');\r\n                }\r\n            }\r\n            else {\r\n                hero.fastTravel = false;\r\n            }\r\n        }\r\n    }\r\n    // If target location is down\r\n    else if (hero.row < end.row && direction === 'vertical') {\r\n        // If next cell is clear\r\n        if (map[hero.row][hero.col - 1].contents !== 'blocked' && map[hero.row][hero.col - 1].enemy.length === 0) {\r\n            moveHero('move-down');\r\n        }\r\n        // If blocked\r\n        else {\r\n            // If target is to the left\r\n            if (hero.col > end.col || hero.col === numberOfColumns && map[hero.row - 1][hero.col - 2].contents !== 'blocked' && map[hero.row - 1][hero.col - 2].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-left') {\r\n                    moveHero('move-left');\r\n                }\r\n                else {\r\n                    moveHero('move-right');\r\n                }\r\n            }\r\n            // If not on right most column, move right\r\n            else if (hero.col !== numberOfColumns && map[hero.row - 1][hero.col].contents !== 'blocked' && map[hero.row - 1][hero.col].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-right') {\r\n                    moveHero('move-right');\r\n                }\r\n                else {\r\n                    moveHero('move-left');\r\n                }\r\n            }\r\n            else {\r\n                hero.fastTravel = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If target location is left\r\n    else if (hero.col > end.col && direction === 'horizontal') {\r\n        // If next cell is clear\r\n        if (map[hero.row - 1][hero.col - 2].contents !== 'blocked' && map[hero.row - 1][hero.col - 2].enemy.length === 0) {\r\n            moveHero('move-left');\r\n        }\r\n        // If blocked\r\n        else {\r\n            // If target location is down\r\n            if (hero.row < end.row && map[hero.row][hero.col - 1].contents !== 'blocked' && map[hero.row][hero.col - 1].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-down') {\r\n                    moveHero('move-down');\r\n                }\r\n                else {\r\n                    moveHero('move-up');\r\n                }\r\n            }   \r\n            // If target is up\r\n            else if (hero.row > end.row && map[hero.row - 2][hero.col - 1].contents !== 'blocked' && map[hero.row - 2][hero.col - 1].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-up') {\r\n                    moveHero('move-up');\r\n                }\r\n                else {\r\n                    moveHero('move-down');\r\n                }\r\n            }\r\n            else {\r\n                hero.fastTravel = false;\r\n            }\r\n        }\r\n    }\r\n    // If target location is right\r\n    else if (hero.col < end.col && direction === 'horizontal') {\r\n        // If next cell is clear\r\n        if (map[hero.row - 1][hero.col].contents !== 'blocked' && map[hero.row - 1][hero.col].enemy.length === 0) {\r\n            moveHero('move-right');\r\n        }\r\n        // If blocked\r\n        else {\r\n            // If target location is down\r\n            if (hero.row < end.row && map[hero.row][hero.col - 1].contents !== 'blocked' && map[hero.row][hero.col - 1].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-down') {\r\n                    moveHero('move-down');\r\n                }\r\n                else {\r\n                    moveHero('move-up');\r\n                }\r\n            }   \r\n            // If target is up\r\n            else if (hero.row > end.row && map[hero.row - 2][hero.col - 1].contents !== 'blocked' && map[hero.row - 2][hero.col - 1].enemy.length === 0) {\r\n                // Keep from geting stuck in a loop\r\n                if (hero.lastLocation.lastMove === 'move-up') {\r\n                    moveHero('move-up');\r\n                }\r\n                else {\r\n                    moveHero('move-down');\r\n                }\r\n            }\r\n            else {\r\n                hero.fastTravel = false;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        hero.fastTravel = false;\r\n    }\r\n}\r\n\r\n\r\n// Check collision of movement, and move accordingly\r\nfunction moveHero(move) {\r\n    if (hero.canMove && hero.health > 0 && hero !== null) {\r\n        cooldown(hero,hero.cooldownTimer);\r\n        var munchLocation = map[hero.row - 1][hero.col - 1];\r\n        hero.lastLocation = munchLocation;\r\n        hero.lastLocation.lastMove = move;\r\n        if (move === 'move-up') {\r\n            if (hero.row === 1) {\r\n\r\n            }\r\n            else {\r\n                var mapLocation = map[hero.row - 2][hero.col - 1];\r\n                if (mapLocation.enemy.length > 0) {\r\n                    var name = mapLocation.enemy[0];\r\n                    var target = enemies.filter(function(target) {\r\n                        return target.id === name;\r\n                    })[0];\r\n                    checkForAttack('up',target,hero);\r\n                }\r\n                else if (hero.top >= cellSize && mapLocation.contents !== 'blocked') {\r\n                    map[hero.row - 1][hero.col - 1].hero = false;\r\n                    hero.top -= cellSize;\r\n                    heroContainer.style.transform = 'translate(' + hero.left + 'px, ' + hero.top + 'px)';\r\n                    hero.row--;\r\n                    hero.squaresMoved++;\r\n                    map[hero.row - 1][hero.col - 1].hero = true;\r\n                    checkForTraps();\r\n                    checkForLoot();\r\n                }\r\n                else {\r\n                    checkForAttack('up',mapLocation,hero);\r\n                }\r\n            }\r\n        }\r\n        else if (move === 'move-down') {\r\n            if (hero.row === numberOfRows) {\r\n\r\n            }\r\n            else {\r\n                var mapLocation = map[hero.row][hero.col - 1];\r\n                if (mapLocation.enemy.length > 0) {\r\n                    var name = mapLocation.enemy[0];\r\n                    var target = enemies.filter(function(target) {\r\n                        return target.id === name;\r\n                    })[0];\r\n                    checkForAttack('down',target,hero);\r\n                }\r\n                else if (hero.top <= (numberOfRows - 2) * cellSize && mapLocation.contents !== 'blocked') {\r\n                    map[hero.row - 1][hero.col - 1].hero = false;\r\n                    hero.top += cellSize;\r\n                    heroContainer.style.transform = 'translate(' + hero.left + 'px, ' + hero.top + 'px)';\r\n                    hero.row++;\r\n                    hero.squaresMoved++;\r\n                    map[hero.row - 1][hero.col - 1].hero = true;\r\n                    checkForTraps();\r\n                    checkForLoot();\r\n                }\r\n                else {\r\n                    checkForAttack('down',mapLocation,hero);\r\n                }\r\n            }\r\n        }\r\n        else if (move === 'move-left') {\r\n            if (hero.col === 1) {\r\n\r\n            }\r\n            else {\r\n                var mapLocation = map[hero.row - 1][hero.col - 2];\r\n                if (mapLocation.enemy.length > 0) {\r\n                    var name = mapLocation.enemy[0];\r\n                    var target = enemies.filter(function(target) {\r\n                        return target.id === name;\r\n                    })[0];\r\n                    checkForAttack('left',target,hero);\r\n                }\r\n                else if (hero.left >= cellSize && mapLocation.contents !== 'blocked') {\r\n                    map[hero.row - 1][hero.col - 1].hero = false;\r\n                    hero.left -= cellSize;\r\n                    heroContainer.style.transform = 'translate(' + hero.left + 'px, ' + hero.top + 'px)';\r\n                    hero.col--;\r\n                    hero.squaresMoved++;\r\n                    map[hero.row - 1][hero.col - 1].hero = true;\r\n                    checkForTraps();\r\n                    checkForLoot();\r\n                }\r\n                else {\r\n                    checkForAttack('left',mapLocation,hero);\r\n                }\r\n            }\r\n        }\r\n        else if (move === 'move-right') {\r\n            if (hero.col === numberOfColumns) {\r\n            }\r\n            else {\r\n                var mapLocation = map[hero.row - 1][hero.col];\r\n                if (mapLocation.enemy.length > 0) {\r\n                    var name = mapLocation.enemy[0];\r\n                    var target = enemies.filter(function(target) {\r\n                        return target.id === name;\r\n                    })[0];\r\n                    checkForAttack('right',target,hero);\r\n                }\r\n                else if (hero.left <= (numberOfColumns - 2) * cellSize && mapLocation.contents !== 'blocked') {\r\n                    map[hero.row - 1][hero.col - 1].hero = false;\r\n                    hero.left += cellSize;\r\n                    heroContainer.style.transform = 'translate(' + hero.left + 'px, ' + hero.top + 'px)';\r\n                    hero.col++;\r\n                    hero.squaresMoved++;\r\n                    map[hero.row - 1][hero.col - 1].hero = true;\r\n                    checkForTraps();\r\n                    checkForLoot();\r\n                }\r\n                else {\r\n                    checkForAttack('right',mapLocation,hero);\r\n                }\r\n            }\r\n        }\r\n        hero.location = 'r' + hero.row + 'c' + hero.col;\r\n        if (hero.location === levelExit.id && hero.answers >= hero.answersNeeded) {\r\n            if (hero.bossLevel && hero.bossIsDead || hero.bossLevel === false) {\r\n                hero.canMove = false;\r\n                hero.gameLevel++;\r\n                if (hero.bossLevel && hero.bossIsDead) {\r\n                    hero.knights.splice(0,3);\r\n                }\r\n                if (options.tutorial) {\r\n                    options.tutorial = false;\r\n                }\r\n                // Save game to local storage\r\n                localStorage.setItem('savedGame', JSON.stringify(hero));\r\n                localStorage.setItem('options', JSON.stringify(options));\r\n                if (hero.knights.length === 0) {\r\n                    options.endgame = true;\r\n                    startGame();\r\n                }\r\n                else {\r\n                    awardXp('level');\r\n                    startGame();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/////////////// ATTACK_PLAYER ///////////////\r\n\r\n// Flash hit image on character\r\nfunction flashHitImage(victim,victimContainer) {\r\n    if (victim.hasOwnProperty('id')) {\r\n        victimContainer.classList.add('hit');\r\n        setTimeout(function() {\r\n            victimContainer.classList.remove('hit');\r\n        }, 350);\r\n    }\r\n}\r\n\r\n\r\n// Attack depending on what direction you are attacking from\r\nfunction checkForAttack(direction,victim,attacker) {\r\n    if (victim.hasOwnProperty('health')) {\r\n        // Check if evasion stops attack\r\n        if (randomNumber(1,100) > victim.evasion) {\r\n            if (victim.health > 0) {\r\n                var victimContainer = document.getElementById(victim.id);\r\n                if (victim.hero) {\r\n                    victimContainer = player;\r\n                }\r\n                flashHitImage(victim,victimContainer);\r\n                // Move attacker for attack animation\r\n                var attackerContainer = document.getElementById(attacker.id);\r\n                var attackerTop = attacker.top;\r\n                var attackerLeft = attacker.left;\r\n                if (direction === 'up') {\r\n                    var original = attackerContainer.style.zIndex;\r\n                    attackerContainer.style.zIndex = 25;\r\n                    attackerContainer.style.transform = 'translate(' + attacker.left + 'px, ' + (attacker.top - (cellSize / 2)) + 'px)';\r\n                    setTimeout(function() { \r\n                        attackerContainer.style.transform = 'translate(' + attacker.left + 'px, ' + attackerTop + 'px)';\r\n                        setTimeout(function() {\r\n                            attackerContainer.style.zIndex = original;\r\n                        }, 200);\r\n                    }, 200);\r\n                }\r\n                else if (direction === 'down') {\r\n                    attackerContainer.style.transform = 'translate(' + attacker.left + 'px, ' + (attacker.top + (cellSize / 2)) + 'px)';\r\n                    setTimeout(function() { \r\n                        attackerContainer.style.transform = 'translate(' + attacker.left + 'px, ' + attackerTop + 'px)';\r\n                    }, 200);\r\n                }\r\n                else if (direction === 'left') {\r\n                    attackerContainer.style.transform = 'translate(' + (attacker.left - (cellSize / 2)) + 'px, ' + attacker.top + 'px)';\r\n                    setTimeout(function() { \r\n                        attackerContainer.style.transform = 'translate(' + attacker.left + 'px, ' + attackerTop + 'px)';\r\n                    }, 200);\r\n                }\r\n                else if (direction === 'right') {\r\n                    attackerContainer.style.transform = 'translate(' + (attacker.left + (cellSize / 2)) + 'px, ' + attacker.top + 'px)';\r\n                    setTimeout(function() { \r\n                        attackerContainer.style.transform = 'translate(' + attacker.left + 'px, ' + attackerTop + 'px)';\r\n                    }, 200);\r\n                }\r\n                if (victim === hero) {\r\n                    dealDamage(attacker.baseDamage,attacker);\r\n                }\r\n                else {\r\n                    victim.health -= attacker.baseDamage * attacker.attackRating;\r\n                    if (victim.boss) {\r\n                        if (victim.type === 'Red Knight') {\r\n                            var healthBar = document.getElementById('boss-health-redknight');\r\n                        }\r\n                        else if (victim.type === 'Blue Knight') {\r\n                            var healthBar = document.getElementById('boss-health-blueknight');\r\n                        }\r\n                        else if (victim.type === 'Yellow Knight') {\r\n                            var healthBar = document.getElementById('boss-health-yellowknight');\r\n                        }\r\n                        else {\r\n                            var healthBar = document.getElementById('boss-health');\r\n                        }\r\n\r\n                            healthBar.style.opacity = '1';\r\n                            healthBar.style.width = (victim.health / victim.startingHealth) * 100 + '%';\r\n                    }\r\n                    if (victim.health <= 0) {\r\n                        if (victim.object) {\r\n                            delete map[victim.row - 1][victim.col - 1].health;\r\n                            var object = document.querySelector('#' + victim.location + ' img');\r\n                                object.style.opacity = '0';\r\n                                object.parentElement.classList.remove('torch');\r\n                            // If it is a column\r\n                            if (victim.object === 'wall') {\r\n                                // Remove from columnArray\r\n                                var colIndex = columnArray.map(function(e) { return e.location; }).indexOf(victim.location);\r\n                                columnArray.splice(colIndex,1);\r\n                                victim.contents = 'empty';\r\n                            }\r\n                            else {\r\n                                rollLoot(victim);\r\n                            }\r\n                        }\r\n                        else {\r\n                            map[victim.row - 1][victim.col - 1].enemy.splice(0,1);\r\n                            var enemyIndex = enemies.map(function(e) { return e.id; }).indexOf(victim.id);\r\n                            enemies.splice(enemyIndex,1);\r\n                            victimContainer.style.opacity = '0';\r\n                            setTimeout(function() {\r\n                                victimContainer.remove();\r\n                            }, 350);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (victim === hero) {\r\n                hero.attacksEvaded++;\r\n                flashMessage(victim,'evaded!');\r\n            }\r\n            else {\r\n                flashMessage(victim,'miss!');\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Flash a status message for evasions\r\nfunction flashMessage(person,message,time) {\r\n    var msg = document.querySelector('#' + person.id + ' .message');\r\n    if (msg === null || hero.health <= 0) {\r\n        console.log('message error fixed');\r\n        return;\r\n    }\r\n    else {\r\n            msg.innerHTML = message;\r\n            msg.style.display = 'flex';\r\n            msg.style.opacity = '0';\r\n            if (time) {\r\n                var duration = time / 1000;\r\n            }\r\n            else {\r\n                var duration = 0.7;\r\n            }\r\n            msg.style.animation = 'flash-message ' + duration + 's 1 forwards';\r\n        setTimeout(function() {\r\n            msg.style.display = 'none';\r\n        }, duration * 1000);\r\n    }\r\n}\r\n\r\n\r\n// Deal damage depending on what healing method is passed to the function\r\nfunction dealDamage(amount,source) {\r\n    if (source.hasOwnProperty('attackRating')) {\r\n        amount *= source.attackRating;\r\n    }\r\n    amount *= hero.armorRating;\r\n    hero.health -= amount;\r\n    if (hero.health <= 0) {\r\n        // Determine the cause of death\r\n        var location = map[hero.row -1][hero.col - 1];\r\n        // If it was a trap\r\n        if (source === 'trap') {\r\n            if (location.object === 'spikes') {\r\n                var deathBy = deathText.spikes[randomNumber(0,deathText.spikes.length - 1)];\r\n            }\r\n            else if (location.object === 'fire-grate') {\r\n                var deathBy = deathText.fireGrate[randomNumber(0,deathText.fireGrate.length - 1)];\r\n            }\r\n            else if (location.trapType) {\r\n                var deathBy = 'Slipped and fell on some ' + location.trapType;\r\n            }\r\n        }\r\n        // If it was a wrong answer\r\n        else if (source === 'wrong answer') {\r\n            var deathBy = deathText.math[randomNumber(0,deathText.math.length - 1)];\r\n        }\r\n        // If they ran out of time\r\n        else if (source === 'time') {\r\n            var deathBy = deathText.time[randomNumber(0,deathText.time.length - 1)];\r\n        }\r\n        // If it was an enemy\r\n        else if (source.enemy) {\r\n            if (source.type === 'Bat') {\r\n                var deathBy = deathText.bat[randomNumber(0,deathText.bat.length - 1)];\r\n            }\r\n            else if (source.type === 'Gelatinous Cube') {\r\n                var deathBy = deathText.gelCube[randomNumber(0,deathText.gelCube.length - 1)];\r\n            }\r\n            else if (source.type === 'Giant Spider') {\r\n                var deathBy = deathText.spider[randomNumber(0,deathText.spider.length - 1)];\r\n            }\r\n            else if (source.type === 'Number Mage') {\r\n                var deathBy = deathText.numMage[randomNumber(0,deathText.numMage.length - 1)];\r\n            }\r\n            else if (source.type === 'Oculord') {\r\n                var deathBy = deathText.oculord[randomNumber(0,deathText.oculord.length - 1)];\r\n            }\r\n            else if (source.type === 'Vampire') {\r\n                var deathBy = deathText.vampire[randomNumber(0,deathText.vampire.length - 1)];\r\n            }\r\n            else if (source.type === 'Spider Queen') {\r\n                var deathBy = deathText.spiderQueen[randomNumber(0,deathText.spiderQueen.length - 1)];\r\n            }\r\n            else if (source.type === 'Vampire Lord') {\r\n                var deathBy = deathText.vampireLord[randomNumber(0,deathText.vampireLord.length - 1)];\r\n            }\r\n            else if (source.type === 'Red Knight' || source.type === 'Blue Knight' ||source.type === 'Yellow Knight') {\r\n                var deathBy = deathText.threeKnights[randomNumber(0,deathText.threeKnights.length - 1)];\r\n            }\r\n        }\r\n        youDied(deathBy);\r\n    }\r\n    else {\r\n        healthBar.style.width = hero.health + '%';\r\n    }\r\n}","/////////////// TUTORIAL ///////////////\r\n\r\nvar rescueText =    ['Hail, and well met!',\r\n                    'You&apos;re here to rescue us? Inconceivable!',\r\n                    'You are the greatest swordsman that ever lived!',\r\n                    'Thank you!',\r\n                    'It was starting to get really boring in here...',\r\n                    'This place totally stinks, thank you for rescuing us!',\r\n                    'I can&apos;t wait to go home and get on the internet again!',\r\n                    'I knew you would come for us!',\r\n                    'You&apos;re awesome!',\r\n                    'I hate spiders!',\r\n                    'I thought we were done for!',\r\n                    'Did you bring anything to eat with you? I&apos;m starving!',\r\n                    'You&apos;re the coolest.',\r\n                    'Have you found the others?',\r\n                    'You were always my favorite. Thank you!'];\r\n\r\n// Display story and message text on screen\r\nvar multipart = 0;\r\nfunction textBubble(msg,delay) {\r\n    if (delay === undefined) {\r\n        delay = 2000;\r\n    }\r\n    if (multipart === 'done') {\r\n        multipart = 0;\r\n    }\r\n    hero.pause = true;\r\n    hero.canMove = false;\r\n    tutorialData.proceed = false;\r\n    setTimeout(function() {\r\n        var overlay = document.getElementById('level-splash');\r\n            overlay.innerHTML = '';\r\n            overlay.style.opacity = '0';\r\n            overlay.style.display = 'flex';\r\n        var bubble = document.createElement('div');\r\n            bubble.style.backgroundColor = 'rgba(0,0,0,0.8)';\r\n\r\n        // If a multi part message is received\r\n        if (Array.isArray(msg) && multipart < msg.length) {\r\n            if (msg[0] === 'theend') {\r\n                bubble.innerHTML = '<h5>- The End -</h5>';\r\n            }\r\n            else {\r\n                bubble.innerHTML = msg[multipart];\r\n            }\r\n            multipart++;\r\n        }\r\n        else {\r\n            // If rescuing a knight\r\n            if (msg === 'rescue') {\r\n                var knight1 = document.createElement('p');\r\n                    knight1.style.color = hero.knights[0].color;\r\n                    knight1.innerHTML = rescueText[randomNumber(0,rescueText.length - 1)];\r\n                    bubble.appendChild(knight1);\r\n                var knight2 = document.createElement('p');\r\n                    knight2.style.color = hero.knights[1].color;\r\n                    knight2.innerHTML = rescueText[randomNumber(0,rescueText.length - 1)];\r\n                    bubble.appendChild(knight2);\r\n                var knight3 = document.createElement('p');\r\n                    knight3.style.color = hero.knights[2].color;\r\n                    knight3.innerHTML = rescueText[randomNumber(0,rescueText.length - 1)];\r\n                    bubble.appendChild(knight3);\r\n            }\r\n            else {\r\n                bubble.innerHTML = msg;\r\n            }\r\n        }\r\n\r\n        // Close message after clicking on it\r\n        setTimeout(function() {\r\n            bubble.addEventListener('click', function() {\r\n                overlay.style.animation = 'fade-in 1s 1 forwards';\r\n                setTimeout(function() {\r\n                    tutorialData.proceed = true;\r\n                    hero.canMove = true;\r\n                    hero.pause = false;\r\n                    overlay.style.display = 'none';\r\n                    if (Array.isArray(msg) && multipart < msg.length) {\r\n                        textBubble(msg,delay);\r\n                    }\r\n                    else if (multipart >= msg.length) {\r\n                        multipart = 'done';\r\n                    }\r\n                }, 1000);\r\n            });\r\n        }, 1000);\r\n\r\n        overlay.appendChild(bubble);\r\n        overlay.style.animation = 'fade-out 1s 1 forwards';\r\n    }, delay);\r\n}\r\n\r\n\r\n// Settings for tutorial\r\nvar tutorialData = {\r\n    proceed: false,\r\n    tilesetOutside: 9,\r\n    tilesetInside: 6,\r\n    exitLocation: [numberOfRows - 1, 2],\r\n    numDebris: 2,\r\n    numColumns: 2,\r\n    numTraps: 2,\r\n    objectTheme: themes[1],\r\n    wallTileset: 5,\r\n    wallLocation: [[1,1],[1,numberOfColumns - 2]],\r\n    trapLocation: [[numberOfRows - 2,1],[numberOfRows - 2,numberOfColumns - 2]],\r\n    heroTop: cellSize * 3,\r\n    heroLeft: cellSize * 2,\r\n    heroRow: 4,\r\n    heroCol: 3,\r\n    heroLocation: 'r4c3',\r\n    gameMode: 'multiples',\r\n    target: 10,\r\n};\r\n\r\n\r\n// Run the tutorial level for new players\r\nfunction startTutorial() {\r\n\r\n    var message = 'Welcome to Number Knight!<br />Tap here to get started.';\r\n    textBubble(message);\r\n    hero.evasion = 100;\r\n    hero.canCapture = false;\r\n\r\n    // TUTORIAL SECTION - Show movement buttons\r\n    var showButtons = setInterval(function() {\r\n        if (tutorialData.proceed) {\r\n            clearInterval(showButtons);\r\n            var moveButtons = [];\r\n                moveButtons.push(moveUp,moveRight,moveDown,moveLeft);\r\n            var i = 0;\r\n            var interval = setInterval(function() {\r\n                if (i >= moveButtons.length) {\r\n                    clearInterval(interval);\r\n                }\r\n                else {\r\n                    moveButtons[i].style.animation = 'fade-out 0.5s 1 forwards';\r\n                    i++;\r\n                }\r\n            }, 250);\r\n            var message = 'Tap the arrows to move around, or use the arrow keys if you have a keyboard.';\r\n            textBubble(message,2000);\r\n            teachMovement();\r\n        }\r\n    }, 250);\r\n\r\n    // TUTORIAL SECTION - Teach basic movement to player\r\n    function teachMovement() {\r\n        hero.squaresMoved = 0;\r\n        var moveOnce = setInterval(function() {\r\n            if (hero.squaresMoved >= 2) {\r\n                clearInterval(moveOnce);\r\n                var message = 'Great. Now auto move to the highlighted square by tapping on it.';\r\n                tutorialData.highlightedSquare = map[0][numberOfColumns - 1].location,\r\n                textBubble(message,0);\r\n                setTimeout(function() {\r\n                    var square = document.getElementById(tutorialData.highlightedSquare);\r\n                        square.style.border = '2px solid rgba(0,0,0,0)';\r\n                        square.style.borderRadius = '6px';\r\n                        square.style.transition = 'border-color 1s';\r\n                        square.style.borderColor = 'rgba(255,215,0,1)';\r\n                }, 1000);\r\n            }\r\n        }, 250);\r\n        var moveToSquare = setInterval(function() {\r\n            if (hero.location === map[0][numberOfColumns - 1].location) {\r\n                clearInterval(moveToSquare);\r\n                var message = 'See those 2 traps? Go step on one and see what happens.';\r\n                textBubble(message,0);\r\n                setTimeout(function() {\r\n                    var square = document.getElementById(tutorialData.highlightedSquare);\r\n                        square.style.borderColor = 'rgba(47,45,37,0.5)';\r\n                    var moveButtons = [];\r\n                        moveButtons.push(moveUp,moveRight,moveDown,moveLeft);\r\n                    for (var i = 0; i < moveButtons.length; i++) {\r\n                        moveButtons[i].style.animation = 'fade-in 0.5s 1 forwards';\r\n                    }\r\n                    setTimeout(function() {\r\n                        for (var i = 0; i < moveButtons.length; i++) {\r\n                            moveButtons[i].style.opacity = 0;\r\n                        }\r\n                        teachTraps();\r\n                    }, 500);\r\n                }, 500);\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    // TUTORIAL SECTION - Teach player about damage from traps\r\n    function teachTraps() {\r\n        hero.squaresMoved = 0;\r\n        hero.evasion = 0;\r\n        document.getElementById('healthbar').style.opacity = 1;\r\n        for (var i = 0; i < 2; i++) {\r\n            document.getElementById(trapArray[i].location).style.border = '2px solid rgba(0,0,0,0)';\r\n            document.getElementById(trapArray[i].location).style.borderRadius = '6px';\r\n            document.getElementById(trapArray[i].location).style.transition = 'border-color 1s';\r\n            document.getElementById(trapArray[i].location).style.borderColor = 'rgba(226,39,39,1)';\r\n        }\r\n        var interval = setInterval(function() {\r\n            if (hero.squaresMoved >= 2) {\r\n                clearInterval(interval);\r\n                for (var i = 0; i < 2; i++) {\r\n                    document.getElementById(trapArray[i].location).style.borderColor = 'rgba(47,45,37,0.5)';\r\n                }\r\n            }\r\n        }, 250);\r\n        var takeDamage = setInterval(function() {\r\n            if (hero.health < 100) {\r\n                clearInterval(takeDamage);\r\n                var message = 'Ouch! Break open one of these containers and find something to heal yourself with.';\r\n                textBubble(message,500);\r\n                hero.evasion = 100;\r\n                teachLooting();\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n\r\n    // TUTORIAL SECTION - Teach player how to break objects and find loot\r\n    function teachLooting() {\r\n        var object1 = document.getElementById(map[0][0].location);\r\n        var object2 = document.getElementById(map[numberOfRows - 1][numberOfColumns - 1].location);\r\n        var objects = [];\r\n            objects.push(object1,object2);\r\n        for (var i = 0; i < 2; i++) {\r\n            objects[i].style.border = '2px solid rgba(0,0,0,0)';\r\n            objects[i].style.borderRadius = '6px';\r\n            objects[i].style.transition = 'border-color 1s';\r\n            objects[i].style.borderColor = 'rgba(255,215,0,1)';\r\n        }\r\n        hero.squaresMoved = 0;\r\n        var interval = setInterval(function() {\r\n            if (hero.squaresMoved > 0) {\r\n                var objects = document.querySelectorAll('.cell');\r\n                for (var i = 0; i < objects.length; i++) {\r\n                    objects[i].style.borderColor = 'rgba(47,45,37,0.5)';\r\n                }\r\n            }\r\n            if (hero.health === 100) {\r\n                clearInterval(interval);\r\n                teachMath();\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n\r\n    // TUTORIAL SECTION - Teach the player how to match\r\n    function teachMath() {\r\n        var message = 'What would a dungeon be without math?';\r\n        textBubble(message,1000);\r\n        var mathTutorial = document.querySelectorAll('.cell p');\r\n        var i = 0;\r\n        var interval = setInterval(function() {\r\n            if (i >= mathTutorial.length) {\r\n                clearInterval(interval);\r\n                document.querySelector('#top-bar .btn-options').style.pointerEvents = 'auto';\r\n                document.getElementById('top-bar').style.opacity = 1;\r\n                continueMath();\r\n            }\r\n            else if (tutorialData.proceed) {\r\n                mathTutorial[i].style.opacity = 1;\r\n                i++;\r\n            }\r\n        }, 100);\r\n        function continueMath() {\r\n            var message = 'Stand on top of the nearest Multiple of 10, and capture the tile by tapping on your player, or by pressing the spacebar.';\r\n            textBubble(message,500);\r\n            hero.canCapture = true;\r\n            var interval = setInterval(function() {\r\n                if (hero.answers > 0) {\r\n                    var message = 'Great! Now capture a few more.';\r\n                    textBubble(message,0);\r\n                    clearInterval(interval);\r\n                }\r\n            }, 250);\r\n            var moreMath = setInterval(function() {\r\n                if (hero.answers > 2 && tutorialData.proceed) {\r\n                    teachCombat();\r\n                    clearInterval(moreMath);\r\n                }\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n\r\n    // TUTORIAL SECTION - Teach the player how to deal with enemies\r\n    function teachCombat() {\r\n        hero.canCapture = false;\r\n        hero.enemiesSlain = 0;\r\n        var message = \"It wouldn't be a proper dungeon without monsters now would it?\";\r\n        textBubble(message,0);\r\n        var interval = setInterval(function() {\r\n            if (tutorialData.proceed) {\r\n                letTheGamesBegin();\r\n                document.getElementById('xpbar').style.opacity = 1;\r\n                clearInterval(interval);\r\n                var message = 'Stand next to an enemy and tap on it to attack. Watch out for the pools of acid!';\r\n                textBubble(message,2500);\r\n            }\r\n        }, 250);\r\n        var slayMonster = setInterval(function() {\r\n            if (hero.enemiesSlain > 0) {\r\n                hero.canCapture = true;\r\n                var message = \"To proceed deeper into the dungeon capture any remaining tiles.\";\r\n                textBubble(message,0);\r\n                clearInterval(slayMonster);\r\n                finishUp();\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    // TUTORIAL SECTION - Finish up the tutorial and lay out the story\r\n    function finishUp() {\r\n        var interval = setInterval(function() {\r\n            if (hero.answers >= hero.answersNeeded) {\r\n                var message = ['Your training is complete, but your journey is just beginning...',\r\n                    'You are the only remaining Number Knight. The others have all been captured by the foul beasts within this dungeon.',\r\n                    'It is up to you and you alone to rescue them and return peace and safety to this world once again.<br /><br />Good luck!'];\r\n                textBubble(message,500);\r\n                clearInterval(interval);\r\n            }\r\n        }, 250);\r\n        var final = setInterval(function() {\r\n            if (multipart === 'done') {\r\n                setTimeout(function() {\r\n                    clearInterval(final);\r\n                    options.tutorial = false;\r\n                    options.newgame = false;\r\n                    openExitCover();\r\n                    restoreHealth(100);\r\n                    hero.evasion = 10;\r\n                }, 1000);\r\n            }\r\n        }, 250);\r\n    }\r\n}","/////////////// DEATH ///////////////\r\n\r\n// Add player to fallen heroes and display final summary\r\nfunction youDied(deathBy) {\r\n    healthBar.style.width = '0';\r\n    // Add hero to list of fallen heroes\r\n    hero.death = deathBy;\r\n    fallenHeroes.push(hero);\r\n    // Sort fallen heroes list\r\n    fallenHeroes.sort( function(a,b) { return b.gameLevel - a.gameLevel; } );\r\n    // Trim list if too long\r\n    if (fallenHeroes.length > 25) {\r\n        fallenHeroes.splice((fallenHeroes.length), 1);\r\n    }\r\n    localStorage.setItem('fallenHeroes', JSON.stringify(fallenHeroes));\r\n    localStorage.setItem('options', JSON.stringify(options));\r\n    // Kill character\r\n    localStorage.removeItem('savedGame');\r\n    listFallenStats(hero,'game-over');\r\n        hero = null;\r\n        hero = { canMove: false };\r\n}\r\n\r\n\r\n// Fade to black, reset menus, and fade back in\r\nfunction fadeToMainMenu(callback) {\r\n    fadeOut();\r\n    setTimeout(function() {\r\n        try {\r\n            map = null;\r\n            enemies = null;\r\n            numberOfEnemies = 0;\r\n            totalWeight = 0;\r\n            hero.canMove = false;\r\n            // Reset challenge and boss levels\r\n            hero.challengeMode = false;\r\n            hero.bossLevel = false;\r\n            hero.bossHasSpawned = false;\r\n            hero.bossIsDead = false;\r\n            optionsPosition = 'closed';\r\n            document.getElementById('options-menu').style.transform = 'translateX(-100%)';\r\n            var title = document.querySelector('.flip-container');\r\n                title.style.display = 'flex';\r\n            var gameOver = document.getElementById('game-over');\r\n                gameOver.style.display = 'none';\r\n                gameOver.style.opacity = '0';\r\n            titleButtons();\r\n            setTimeout(function() {\r\n                callback();\r\n            }, 500);\r\n        } catch(e) {\r\n            console.log(e);\r\n            console.log('fadeToMainMenu ERROR');\r\n        }\r\n    }, 1000);\r\n}\r\n\r\n\r\n// Display how the character died in a plethora of humorous ways\r\nvar deathText = {\r\n\r\n    spikes:     ['Tripped and fell on some spikes.',\r\n                'Landed heart first on a spike.',\r\n                'Felt the need to add another hole to their face.',\r\n                'Got into a fight with some spikes and lost.',\r\n                'Death by spikes.',\r\n                'Tried to make out with some spikes and was very successful.'],\r\n\r\n    fireGrate:  ['Got a little too fired up by a fire grate.',\r\n                'Got served up extra crispy by a fire grate.',\r\n                'Cooked to perfection by a fire grate.',\r\n                'Killed by a fire grate.',\r\n                'Tripped and fell into a fire grate.',\r\n                'Do you smell what the dungeon is cookin? Fire grate does.'],\r\n\r\n    math:       ['Forgot how to math.',\r\n                'Left their calculator at home.',\r\n                'Didn&apos;t pay attention in math class.',\r\n                'Got mathed upside the head.',\r\n                'Got in a fight with a number and lost.',\r\n                'Couldn&apos;t math their way out of a paper bag.',\r\n                'Death by math.',\r\n                'Killed by numbers.',\r\n                'Math is hard.'],\r\n\r\n    time:       ['Ran out of time.'],\r\n\r\n    bat:        ['Nibbled to death by a bat.',\r\n                'Killed by a flying rat.',\r\n                'Got one too many bats to the face.',\r\n                'Death by bats.',\r\n                'Lost a fight to a bat.',\r\n                'Ran into a bats mouth face first.'],\r\n\r\n    gelCube:    ['Ate too much Jell-O.',\r\n                'Run over by a Gelatinous Cube.',\r\n                'Got a big ole hug from a Gelatinous Cube.',\r\n                'Got into a fatal makeout session with a Gelatinous Cube.',\r\n                'Being slowly digested and turned into Gelatinous Cube poop.',\r\n                'Trapped in a Gelatinous Cube of emotion.'],\r\n\r\n    spider:     ['Killed by a spider. A big one.',\r\n                'I hate spiders. Why did I put them in my game??',\r\n                'Not very good at making friends with spiders.',\r\n                'Food for the Spider Queen.',\r\n                'Spiders are very aggressive huggers.',\r\n                'Tripped and fell into a spiders mouth.'],\r\n\r\n    numMage:    ['Killed by the weakest enemy in the entire game.',\r\n                'Got out numbered by a Number Mage.',\r\n                'Death by Number Mage.',\r\n                'Do Number Mages even deal damage?'],\r\n\r\n    oculord:    ['Looked too deeply into the all seeing eye of the Oculord.',\r\n                'Beat up by a giant meatball.',\r\n                'Died valiantly while battling an Oculord.',\r\n                'Death by Oculord.',\r\n                'Eaten by a one-eyed flying meatball.',\r\n                'Put food on the table for a family of Oculords.'],\r\n                \r\n    vampire:    ['Killed by a vampire.',\r\n                'Got a very aggressive hickey from a vampire.',\r\n                'Was the main course at the all you can eat vampire buffet.',\r\n                'Decided to help out a starving vampire in need.',\r\n                'Gave a vampire a tall glass of Blood Light.',\r\n                'Got a big sloppy, bloody kiss from a vampire.'],\r\n\r\n    spiderQueen:    ['Food for Spider Queen babies.',\r\n                    'I still hate spiders. Why did I put a gigantic one that shoots poison in my game??',\r\n                    'Put food on the table for a family of spiders.',\r\n                    'Got wrapped up like a Christmas present for some hungry spider kids.',\r\n                    'Eaten by a big mommy spider.',\r\n                    'Tried to headbutt the Spider Queen, but got eaten instead.'],\r\n\r\n    vampireLord:    ['Killed by the Vampire Lord.',\r\n                    'Frozen. Bitten. And drained of all life by the Vampire Lord.',\r\n                    'The Vampire Lord does not like non-vampires.',\r\n                    'Got turned into a vampire by the Vampire Lord. So I guess that&apos;s pretty cool.',\r\n                    'Vampire Lord thanks you for the delicious blood.',\r\n                    'More blood for the vampire lord.'],\r\n\r\n    threeKnights:   ['Was defeated by The Three Knights.'],\r\n}\r\n\r\n\r\n// The player won, show a scene and end game\r\nfunction theEnd() {\r\n    heroContainer.style.opacity = '0';\r\n    var topBar = document.getElementById('top-bar');\r\n        topBar.style.opacity = '0';\r\n    var bottomBar = document.getElementById('bottom-bar');\r\n        bottomBar.style.opacity = '0';\r\n    hero.canMove = false;\r\n    fadeIn();\r\n    var message1 =  ['The Number Knights have been reunited and are now stronger than ever.',\r\n                    'The evil beasts within this dungeon have all been slain, and peace has once again returned to this world.',\r\n                    'Thank you for playing!'];\r\n    textBubble(message1);\r\n    var interval = setInterval(function() {\r\n        if (multipart === 'done') {\r\n            clearInterval(interval);\r\n            var message2 = ['theend'];\r\n            textBubble(message2,3000);\r\n            var ending = setInterval(function() {\r\n                if (multipart === 'done') {\r\n                    clearInterval(ending);\r\n                    youDied('Quest Complete');\r\n                    setTimeout(function() {\r\n                        heroContainer.style.opacity = '1';\r\n                        topBar.style.opacity = '1';\r\n                        bottomBar.style.opacity = '1';\r\n                    }, 1000);\r\n                    options.endgame = false;\r\n                    localStorage.setItem('options', JSON.stringify(options));\r\n                }\r\n            }, 500);\r\n        }\r\n    }, 500);\r\n}","/////////////// UTILITIES ///////////////\r\n\r\n// Randomize loot drop\r\nfunction rollLoot(victim) {\r\n    if (options.tutorial || randomNumber(1,100) <= lootChance) {\r\n        var lootType = loot[randomNumber(0,loot.length - 1)];\r\n        var lootAmount = lootType.amount[randomNumber(0,lootType.amount.length - 1)];\r\n        if (options.tutorial && options.newgame) {\r\n            lootType = loot[0];\r\n            lootAmount = lootType.amount[2];\r\n        }\r\n        var lootDrop = { type: lootType.type, amount: lootAmount }\r\n        var location = map[victim.row - 1][victim.col - 1]\r\n            location.contents = 'loot';\r\n            location.loot = lootDrop;\r\n        var lootLocation = document.getElementById(victim.location);\r\n        var lootImage = document.createElement('img');\r\n            lootImage.src = 'img/loot/' + lootDrop.type + '-' + lootAmount + '.gif';\r\n            lootImage.style.width = '50%';\r\n            lootLocation.appendChild(lootImage);\r\n    }\r\n    else {\r\n        victim.contents = 'empty';\r\n    }\r\n}\r\n\r\n// Restore health depending on what healing method is passed to the function\r\nfunction restoreHealth(amount) {\r\n    if (hero.health >= 100) {}\r\n    else if (hero.health + amount <= 100) {\r\n        hero.health += amount;\r\n    }\r\n    else {\r\n        hero.health = 100;\r\n    }\r\n    healthBar.style.width = hero.health + '%';\r\n}\r\n\r\n\r\n// Freeze anyone who walks through ice for set number of seconds\r\nfunction freezePerson(person,duration,type) {\r\n    person.canMove = false;\r\n    person.frozen = true;\r\n    var timer = document.getElementById('hero-status');\r\n        timer.style.width = '100%';\r\n    if (type === 'ice') {\r\n        if (hero.hero) {\r\n            hero.timesFrozen++;\r\n        }\r\n        flashMessage(person,'frozen!',duration);\r\n        timer.style.backgroundColor = '#8aeaea';\r\n    }\r\n    else {\r\n        timer.style.backgroundColor = '#24e35a';\r\n    }\r\n        timer.style.display = 'flex';\r\n        timer.style.animation = 'status-effect ' + (duration / 1000) + 's linear 1 forwards';\r\n    setTimeout(function() {\r\n        timer.style.display = 'none';\r\n        person.canMove = true;\r\n        person.frozen = false;\r\n    }, duration);\r\n}\r\n\r\n\r\n// If stepping on a trapped tile deal damage\r\nfunction checkForTraps() {\r\n    var location = map[hero.row - 1][hero.col - 1];\r\n    // Check against hero % chance to evade traps\r\n    if (randomNumber(1,100) < hero.evasion && location.contents === 'trap') {\r\n        hero.trapsEvaded++;\r\n        flashMessage(hero,'evaded!');\r\n    }\r\n    else {\r\n        if (location.trapType === 'ice') {\r\n            var duration = location.trapDuration;\r\n            freezePerson(hero,duration,'ice');\r\n            flashMessage(hero,'frozen!',duration);\r\n        }\r\n        else if (location.trapType === 'web') {\r\n            hero.timesWebbed++;\r\n            var duration = location.trapDuration;\r\n            freezePerson(hero,duration,'web');\r\n            flashMessage(hero,'trapped!',duration);\r\n        }\r\n        else if (location.contents === 'trap') {\r\n            flashHitImage(hero,player);\r\n            dealDamage(location.trapDamage,'trap');\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Check for loot and make necessary changes\r\nfunction checkForLoot() {\r\n    var location = map[hero.row - 1][hero.col - 1];\r\n    if (location.contents === 'loot') {\r\n        var cell = document.querySelectorAll('#' + location.location + ' img');\r\n        if (location.loot.type === 'health' && hero.health < 100) {\r\n            if (options.tutorial && options.newgame) {\r\n                restoreHealth(100);\r\n            }\r\n            else {\r\n                restoreHealth(location.loot.amount);\r\n            }\r\n            location.contents = 'empty';\r\n            for (var i = 0; i < cell.length; i++) {\r\n                cell[i].remove();\r\n            }\r\n        }\r\n        else if (location.loot.type === 'gold') {\r\n            options.gold += location.loot.amount;\r\n            location.contents = 'empty';\r\n            for (var i = 0; i < cell.length; i++) {\r\n                cell[i].remove();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Award that sweet xp\r\nfunction awardXp(source) {\r\n    // Add xp for completing a level\r\n    if (source === 'level') {\r\n        setTimeout(function() {\r\n            hero.xp += 15;\r\n            xpBar.style.width = hero.xp + '%';\r\n            localStorage.setItem('savedGame', JSON.stringify(hero));\r\n        }, 2500);\r\n    }\r\n    // Add xp for slaying a monster\r\n    else {\r\n        hero.xp += Math.floor((0.5 / hero.level) * source.weight);\r\n        xpBar.style.width = hero.xp + '%';\r\n    }\r\n    // Level up and overflow xp\r\n    if (hero.xp >= 100) {\r\n        hero.xp -= 100;\r\n        hero.level++;\r\n        xpBar.style.width = hero.xp + '%';\r\n        var level = document.getElementById('level');\r\n            level.innerHTML = 'Level Up!';\r\n            level.classList.add('level-up');\r\n            level.addEventListener('click', levelUp);\r\n        restoreHealth(100);\r\n    }\r\n}\r\n\r\n\r\n// Allocate 1 skill point for the player to use and change stat accordingly\r\nfunction levelUp() {\r\n    hero.pause = true;\r\n    var str = [0,0,1.2,1.5,1.9,2.5];\r\n    var dex = [0,0,18,28,40,55];\r\n    var end = [0,0,0.95,0.85,0.72,0.5];\r\n    var selection = '';\r\n    var menu = document.getElementById('level-up-menu');\r\n        menu.style.backgroundImage = 'url(\"img/backgrounds/background-0' + randomNumber(1,backgrounds) + '.gif\")';\r\n        menu.style.display = 'flex';\r\n        menu.style.animation = 'img-fade-in 1s 1 forwards';\r\n    var strLvl = document.querySelector('.strength div span');\r\n        strLvl.innerHTML = 'lvl ' + hero.strength;\r\n    var dexLvl = document.querySelector('.dexterity div span');\r\n        dexLvl.innerHTML = 'lvl ' + hero.dexterity;\r\n    var endLvl = document.querySelector('.endurance div span');\r\n        endLvl.innerHTML = 'lvl ' + hero.endurance;\r\n    var choices = document.querySelectorAll('#level-up-menu .row');\r\n\r\n    var changeStr = document.getElementById('add-str');\r\n    if (hero.strength === (str.length - 1)) {\r\n        strLvl.innerHTML = 'MAX';\r\n        changeStr.innerHTML = Math.round(hero.baseDamage * hero.attackRating);\r\n    }\r\n    else {\r\n        changeStr.innerHTML = Math.round((hero.baseDamage * hero.attackRating)) + ' -> ' + Math.round((hero.baseDamage * str[hero.strength + 1]));\r\n    }\r\n    var changeDex = document.getElementById('add-dex');\r\n    if (hero.dexterity === (dex.length - 1)) {\r\n        dexLvl.innerHTML = 'MAX';\r\n        changeDex.innerHTML = hero.evasion + '%';\r\n    }\r\n    else {\r\n        changeDex.innerHTML = hero.evasion + '% -> ' + dex[hero.dexterity + 1] + '%';\r\n    }\r\n    var changeEnd = document.getElementById('add-end');\r\n    if (hero.endurance === (end.length - 1)) {\r\n        endLvl.innerHTML = 'MAX';\r\n        changeEnd.innerHTML = (hero.armorRating * 100) + '%';\r\n    }\r\n    else {\r\n        changeEnd.innerHTML = (hero.armorRating * 100) + '% -> ' + (end[hero.endurance + 1] * 100) + '%';\r\n    }\r\n\r\n    for (var i = 0; i < choices.length; i++) {\r\n        choices[i].addEventListener('click', function(e) {\r\n            for (var i = 0; i < choices.length; i++) {\r\n                choices[i].style.backgroundColor = 'rgba(0,0,0,0)';\r\n                choices[i].style.outlineColor = 'rgba(0,0,0,0)';\r\n            }\r\n            this.style.backgroundColor = 'rgba(255,255,255,0.07)';\r\n            this.style.outlineColor = '#ffd700';\r\n            selection = this.classList[1];\r\n        });\r\n    }\r\n    var button = document.querySelector('#level-up-menu button');\r\n        button.addEventListener('click', function() {\r\n            var done = false;\r\n            if (selection === 'strength' && hero.strength < (str.length - 1)) {\r\n                hero.strength++;\r\n                hero.attackRating = str[hero.strength];\r\n                done = true;\r\n            }\r\n            else if (selection === 'dexterity' && hero.dexterity < (dex.length - 1)) {\r\n                hero.dexterity++;\r\n                hero.evasion = dex[hero.dexterity];\r\n                done = true;\r\n            }\r\n            else if (selection === 'endurance' && hero.endurance < (end.length - 1)) {\r\n                hero.endurance++;\r\n                hero.armorRating = end[hero.endurance];\r\n                done = true;\r\n            }\r\n\r\n            if (done) {\r\n                var level = document.getElementById('level');\r\n                    level.innerHTML = 'Floor ' + hero.gameLevel;\r\n                    level.classList.remove('level-up');\r\n                    level.removeEventListener('click', levelUp);\r\n                    menu.style.animation = 'img-fade-out 1s 1 forwards';\r\n                setTimeout(function() {\r\n                    for (var i = 0; i < choices.length; i++) {\r\n                        choices[i].removeEventListener('click', function(e) {});\r\n                    }\r\n                    menu.style.display = 'none';\r\n                    hero.pause = false;\r\n                }, 1000);\r\n                for (var i = 0; i < choices.length; i++) {\r\n                    choices[i].style.backgroundColor = 'rgba(0,0,0,0)';\r\n                    choices[i].style.outlineColor = 'rgba(0,0,0,0)';\r\n                }\r\n                selection = null;\r\n                var elClone = button.cloneNode(true);\r\n                button.parentNode.replaceChild(elClone, button);\r\n            }\r\n        });\r\n}\r\n\r\n\r\n// Add a cooldown to a skill if needed\r\nfunction cooldown(person,duration) {\r\n    // For the player\r\n    if (person.hero) {\r\n        hero.canMove = false;\r\n    }\r\n    // For enemies\r\n    else {\r\n        person.cooldown = true;\r\n    }\r\n    setTimeout(function() {\r\n        if (person.hero) {\r\n            if (hero.frozen) {\r\n\r\n            }\r\n            else {\r\n                hero.canMove = true;\r\n            }\r\n        }\r\n        else {\r\n            person.cooldown = false;\r\n        }\r\n    }, duration);\r\n}\r\n\r\n\r\n// Calculate accuracy of input answers\r\nfunction getAccuracy(right,wrong) {\r\n    if (right !== 0 || wrong !== 0) {\r\n        return Math.floor((right / (right + wrong)) * 100) + '&#37;';\r\n    }\r\n    else {\r\n        return '--';\r\n    }\r\n}\r\n\r\n\r\n// Random number generator within a range\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","// Cycle through all tilesets to avoid pop-in on level generation\r\nvar loadingStage = document.getElementById('game-over');\r\n// Cycle through each tileset\r\nfor (var i = 1; i <= tilesets; i++) {\r\n    // Cycle through each tile\r\n    for (var j = 1; j <= empty; j++) {\r\n        var img = document.createElement('img');\r\n            img.src = 'img/tiles/' + i + '/empty' + j + '.gif';\r\n            img.style.width = '1px';\r\n            img.style.height = '1px';\r\n        loadingStage.appendChild(img);\r\n    }\r\n}\r\nloadingStage.innerHTML = '';","function cheat() {\r\n    hero.answers = hero.answersNeeded - 1;\r\n    hero.gameLevel = 5;\r\n}"]}